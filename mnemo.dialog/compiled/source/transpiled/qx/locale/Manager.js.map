{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "extend",
    "core",
    "Object",
    "construct",
    "__translations",
    "$$translations",
    "__locales",
    "$$locales",
    "initLocale",
    "__clientLocale",
    "getLocale",
    "statics",
    "tr",
    "messageId",
    "varargs",
    "args",
    "lang",
    "Array",
    "fromArguments",
    "arguments",
    "locale",
    "Manager",
    "getInstance",
    "translate",
    "trn",
    "singularMessageId",
    "pluralMessageId",
    "count",
    "splice",
    "trc",
    "hint",
    "trnc",
    "marktr",
    "properties",
    "check",
    "apply",
    "event",
    "init",
    "Environment",
    "get",
    "variant",
    "members",
    "__defaultLocale",
    "__locale",
    "__language",
    "getLanguage",
    "getTerritory",
    "split",
    "getAvailableLocales",
    "includeNonloaded",
    "locales",
    "push",
    "__extractLanguage",
    "language",
    "pos",
    "indexOf",
    "substring",
    "_applyLocale",
    "value",
    "old",
    "log",
    "Logger",
    "warn",
    "addTranslation",
    "languageCode",
    "translationMap",
    "catalog",
    "key",
    "addLocale",
    "localeCode",
    "localeMap",
    "__lookupAndExpand",
    "localize",
    "assertObject",
    "assertString",
    "assertArray",
    "txt",
    "length",
    "translatedArgs",
    "i",
    "arg",
    "String",
    "format",
    "LocalizedString"
  ],
  "sources": [
    "C:/Users/dadovaz/AppData/Roaming/npm/node_modules/@qooxdoo/framework/source/class/qx/locale/Manager.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * The qx.locale.Manager provides static translation methods (like tr()) and\n * general locale information.\n *\n * @require(qx.event.dispatch.Direct)\n * @require(qx.locale.LocalizedString)\n * @require(qx.bom.client.Locale)\n *\n * Note: \"translating\" the empty string, e.g. tr(\"\") will return the header\n * of the respective .po file. See also https://www.gnu.org/software/gettext/manual/html_node/PO-Files.html#PO-Files\n *\n * @cldr()\n */\n\nqx.Class.define(\"qx.locale.Manager\", {\n  type: \"singleton\",\n  extend: qx.core.Object,\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  construct() {\n    super();\n\n    this.__translations = qx.$$translations || {};\n    this.__locales = qx.$$locales || {};\n\n    this.initLocale();\n    this.__clientLocale = this.getLocale();\n  },\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics: {\n    /**\n     * Translate a message\n     *\n     * @param messageId {String} message id (may contain format strings)\n     * @param varargs {Object} variable number of arguments applied to the format string\n     * @return {String|LocalizedString} The translated message or localized string\n     * @see qx.lang.String.format\n     */\n    tr(messageId, varargs) {\n      var args = qx.lang.Array.fromArguments(arguments, 1);\n\n      return qx.locale.Manager.getInstance().translate(messageId, args);\n    },\n\n    /**\n     * Translate a plural message\n     *\n     * Depending on the third argument the plural or the singular form is chosen.\n     *\n     * @param singularMessageId {String} message id of the singular form (may contain format strings)\n     * @param pluralMessageId {String} message id of the plural form (may contain format strings)\n     * @param count {Integer} singular form if equals 1, otherwise plural\n     * @param varargs {Object} variable number of arguments applied to the format string\n     * @return {String|LocalizedString} The translated message or localized string\n     * @see qx.lang.String.format\n     */\n    trn(singularMessageId, pluralMessageId, count, varargs) {\n      var args = qx.lang.Array.fromArguments(arguments);\n      args.splice(0, 3);\n\n      // assumes \"Two forms, singular used for one only\" (seems to be the most common form)\n      // (http://www.gnu.org/software/gettext/manual/html_node/gettext_150.html#Plural-forms)\n      // closely related with bug #745\n      if (count != 1) {\n        return qx.locale.Manager.getInstance().translate(pluralMessageId, args);\n      } else {\n        return qx.locale.Manager.getInstance().translate(\n          singularMessageId,\n          args\n        );\n      }\n    },\n\n    /**\n     * Translate a message with translation hint (from developer addressed to translator).\n     *\n     * @param hint {String} hint for the translator of the message. Will be included in the .po file.\n     * @param messageId {String} message id (may contain format strings)\n     * @param varargs {Object} variable number of arguments applied to the format string\n     * @return {String|LocalizedString} The translated message or localized string\n     * @see qx.lang.String.format\n     */\n    trc(hint, messageId, varargs) {\n      var args = qx.lang.Array.fromArguments(arguments);\n      args.splice(0, 2);\n\n      return qx.locale.Manager.getInstance().translate(messageId, args);\n    },\n\n    /**\n     * Translate a plural message with translation hint (from developer addressed to translator).\n     *\n     * Depending on the third argument the plural or the singular form is chosen.\n     *\n     * @param hint {String} hint for the translator of the message. Will be included in the .po file.\n     * @param singularMessageId {String} message id of the singular form (may contain format strings)\n     * @param pluralMessageId {String} message id of the plural form (may contain format strings)\n     * @param count {Integer} singular form if equals 1, otherwise plural\n     * @param varargs {Object} variable number of arguments applied to the format string\n     * @return {String|LocalizedString} The translated message or localized string\n     * @see qx.lang.String.format\n     */\n    trnc(hint, singularMessageId, pluralMessageId, count, varargs) {\n      var args = qx.lang.Array.fromArguments(arguments);\n      args.splice(0, 4);\n\n      // see trn()\n      if (count != 1) {\n        return qx.locale.Manager.getInstance().translate(pluralMessageId, args);\n      } else {\n        return qx.locale.Manager.getInstance().translate(\n          singularMessageId,\n          args\n        );\n      }\n    },\n\n    /**\n     * Mark the message for translation but return the original message.\n     *\n     * @param messageId {String} the message ID\n     * @return {String} messageId\n     */\n    marktr(messageId) {\n      return messageId;\n    }\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /** current locale. locale is an language code like de, de_AT, en, en_GB, fr, ... */\n    locale: {\n      check: \"String\",\n      apply: \"_applyLocale\",\n      event: \"changeLocale\",\n      init: (function () {\n        var locale = qx.core.Environment.get(\"locale\");\n        if (!locale || locale === \"\") {\n          return qx.core.Environment.get(\"locale.default\");\n        }\n        var variant = qx.core.Environment.get(\"locale.variant\");\n        if (variant !== \"\") {\n          locale += \"_\" + variant;\n        }\n        return locale;\n      })()\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __defaultLocale: qx.core.Environment.get(\"locale.default\"),\n    __locale: null,\n    __language: null,\n    __translations: null,\n    __locales: null,\n    __clientLocale: null,\n\n    /**\n     * Get the language code of the current locale\n     *\n     * This is the first part of a locale definition. The language for \"de_DE\" would be \"de\"\n     *\n     * @return {String} language code\n     */\n    getLanguage() {\n      return this.__language;\n    },\n\n    /**\n     * Get the territory code of the current locale\n     *\n     * This is the second part of a locale definition. The territory for \"de_DE\" would be \"DE\"\n     *\n     * @return {String} territory code\n     */\n    getTerritory() {\n      return this.getLocale().split(\"_\")[1] || \"\";\n    },\n\n    /**\n     * Return the available application locales\n     *\n     * This corresponds to the LOCALES setting in config.json. Without argument,\n     * it only returns the currently loaded locales, with an argument of true\n     * all locales that went into the build. This is particularly interesting if\n     * locales were generated as dedicated I18N parts, and have to be loaded\n     * explicitly before being available.\n     *\n     * @param includeNonloaded {Boolean?null} include locales not yet loaded\n     * @return {String[]} array of available locales\n     */\n    getAvailableLocales(includeNonloaded) {\n      var locales = [];\n\n      for (var locale in this.__locales) {\n        if (locale != this.__defaultLocale) {\n          if (this.__locales[locale] === null && !includeNonloaded) {\n            continue; // skip not yet loaded locales\n          }\n          locales.push(locale);\n        }\n      }\n\n      return locales;\n    },\n\n    /**\n     * Extract the language part from a locale.\n     *\n     * @param locale {String} locale to be used\n     * @return {String} language\n     */\n    __extractLanguage(locale) {\n      var language;\n      if (locale == null) {\n        return null;\n      }\n      var pos = locale.indexOf(\"_\");\n\n      if (pos == -1) {\n        language = locale;\n      } else {\n        language = locale.substring(0, pos);\n      }\n\n      return language;\n    },\n\n    // property apply\n    _applyLocale(value, old) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (!(value in this.__locales || value == this.__clientLocale)) {\n          qx.log.Logger.warn(\"Locale: \" + value + \" not available.\");\n        }\n      }\n\n      this.__locale = value;\n      this.__language = this.__extractLanguage(value);\n    },\n\n    /**\n     * Add a translation to the translation manager.\n     *\n     * If <code>languageCode</code> already exists, its map will be updated with\n     * <code>translationMap</code> (new keys will be added, existing keys will be\n     * overwritten).\n     *\n     * @param languageCode {String} language code of the translation like <i>de, de_AT, en, en_GB, fr, ...</i>\n     * @param translationMap {Map} mapping of message identifiers to message strings in the target\n     *                             language, e.g. <i>{\"greeting_short\" : \"Hello\"}</i>. Plural forms\n     *                             are separate keys.\n     */\n    addTranslation(languageCode, translationMap) {\n      var catalog = this.__translations;\n      if (catalog[languageCode]) {\n        for (var key in translationMap) {\n          catalog[languageCode][key] = translationMap[key];\n        }\n      } else {\n        catalog[languageCode] = translationMap;\n      }\n    },\n\n    /**\n     * Add a localization to the localization manager.\n     *\n     * If <code>localeCode</code> already exists, its map will be updated with\n     * <code>localeMap</code> (new keys will be added, existing keys will be overwritten).\n     *\n     * @param localeCode {String} locale code of the translation like <i>de, de_AT, en, en_GB, fr, ...</i>\n     * @param localeMap {Map} mapping of locale keys to the target locale values, e.g.\n     *                        <i>{\"cldr_date_format_short\" : \"M/d/yy\"}</i>.\n     */\n    addLocale(localeCode, localeMap) {\n      var catalog = this.__locales;\n      if (catalog[localeCode]) {\n        for (var key in localeMap) {\n          catalog[localeCode][key] = localeMap[key];\n        }\n      } else {\n        catalog[localeCode] = localeMap;\n      }\n    },\n\n    /**\n     * Translate a message using the current locale and apply format string to the arguments.\n     *\n     * Implements the lookup chain locale (e.g. en_US) -> language (e.g. en) ->\n     * default locale (e.g. C). Localizes the arguments if possible and splices\n     * them into the message. If qx.dynlocale is on, returns a {@link\n     * LocalizedString}.\n     *\n     * @param messageId {String} message id (may contain format strings)\n     * @param args {Object[]} array of objects, which are inserted into the format string\n     * @param locale {String ? #locale} locale to be used; if not given, defaults to the value of {@link #locale}\n     * @return {String|LocalizedString} translated message or localized string\n     */\n    translate(messageId, args, locale) {\n      var catalog = this.__translations;\n      return this.__lookupAndExpand(catalog, messageId, args, locale);\n    },\n\n    /**\n     * Provide localization (CLDR) data.\n     *\n     * Implements the lookup chain locale (e.g. en_US) -> language (e.g. en) ->\n     * default locale (e.g. C). Localizes the arguments if possible and splices\n     * them into the message. If qx.dynlocale is on, returns a {@link\n     * LocalizedString}.\n     *\n     * @param messageId {String} message id (may contain format strings)\n     * @param args {Object[]} array of objects, which are inserted into the format string\n     * @param locale {String ? #locale} locale to be used; if not given, defaults to the value of {@link #locale}\n     * @return {String|LocalizedString} translated message or localized string\n     */\n    localize(messageId, args, locale) {\n      var catalog = this.__locales;\n      return this.__lookupAndExpand(catalog, messageId, args, locale);\n    },\n\n    /**\n     * Look up an I18N key in a catalog and expand format strings.\n     *\n     * Implements the lookup chain locale (e.g. en_US) -> language (e.g. en) ->\n     * default locale (e.g. C). Localizes the arguments if possible and splices\n     * them into the message. If qx.dynlocale is on, returns a {@link\n     * LocalizedString}.\n     *\n     * @param catalog {Map} map of I18N keys and their values\n     * @param messageId {String} message id (may contain format strings)\n     * @param args {Object[]} array of objects, which are inserted into the format string\n     * @param locale {String ? #locale} locale to be used; if not given, defaults to the value of {@link #locale}\n     * @return {String|LocalizedString} translated message or localized string\n     */\n    __lookupAndExpand(catalog, messageId, args, locale) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertObject(catalog);\n        this.assertString(messageId);\n        this.assertArray(args);\n      }\n      var txt;\n\n      if (!catalog) {\n        return messageId;\n      }\n\n      if (locale) {\n        var language = this.__extractLanguage(locale);\n      } else {\n        locale = this.__locale;\n        language = this.__language;\n      }\n\n      // e.g. DE_at\n      if (!txt && catalog[locale]) {\n        txt = catalog[locale][messageId];\n      }\n\n      // e.g. DE\n      if (!txt && catalog[language]) {\n        txt = catalog[language][messageId];\n      }\n\n      // C\n      if (!txt && catalog[this.__defaultLocale]) {\n        txt = catalog[this.__defaultLocale][messageId];\n      }\n\n      if (!txt) {\n        txt = messageId;\n      }\n\n      if (args.length > 0) {\n        var translatedArgs = [];\n        for (var i = 0; i < args.length; i++) {\n          var arg = args[i];\n          if (arg && arg.translate) {\n            translatedArgs[i] = arg.translate();\n          } else {\n            translatedArgs[i] = arg;\n          }\n        }\n        txt = qx.lang.String.format(txt, translatedArgs);\n      }\n\n      if (qx.core.Environment.get(\"qx.dynlocale\")) {\n        txt = new qx.locale.LocalizedString(\n          txt,\n          messageId,\n          args,\n          catalog === this.__locales\n        );\n      }\n\n      return txt;\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}