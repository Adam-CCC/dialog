{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "members",
    "__Registration",
    "event",
    "Registration",
    "addListener",
    "type",
    "listener",
    "self",
    "capture",
    "$$disposed",
    "addListenerOnce",
    "context",
    "id",
    "callback",
    "e",
    "removeListenerById",
    "call",
    "$$wrapped_callback",
    "toHashCode",
    "removeListener",
    "$$hash",
    "hasListener",
    "dispatchEvent",
    "evt",
    "__pendingEvents",
    "__promiseWaitForPendingEvents",
    "__trackPendingEvent",
    "result",
    "Promise",
    "isPromise",
    "resolve",
    "hashCode",
    "newPromise",
    "then",
    "promise",
    "Object",
    "keys",
    "length",
    "err",
    "reject",
    "waitForPendingEvents",
    "fireEvent",
    "clazz",
    "args",
    "fireEventAsync",
    "fireNonBubblingEvent",
    "fireNonBubblingEventAsync",
    "fireDataEvent",
    "data",
    "oldData",
    "cancelable",
    "undefined",
    "Data",
    "fireDataEventAsync",
    "core",
    "MEvent"
  ],
  "sources": [
    "C:/Users/dadovaz/AppData/Roaming/npm/node_modules/@qooxdoo/framework/source/class/qx/core/MEvent.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n\n/**\n * This mixin offers basic event handling capabilities. It includes the\n * commonly known methods for managing event listeners and firing events.\n *\n * @use(qx.event.dispatch.Direct)\n * @use(qx.event.handler.Object)\n */\nqx.Mixin.define(\"qx.core.MEvent\", {\n  members: {\n    /** @type {Class} Pointer to the regular event registration class */\n    __Registration: qx.event.Registration,\n\n    /**\n     * Add event listener to this object.\n     *\n     * @param type {String} name of the event type\n     * @param listener {Function} event callback function\n     * @param self {Object ? null} Reference to the 'this' variable inside\n     *         the event listener. When not given, the corresponding dispatcher\n     *         usually falls back to a default, which is the target\n     *         by convention. Note this is not a strict requirement, i.e.\n     *         custom dispatchers can follow a different strategy.\n     * @param capture {Boolean ? false} Whether to attach the event to the\n     *         capturing phase or the bubbling phase of the event. The default is\n     *         to attach the event handler to the bubbling phase.\n     * @return {String} An opaque id, which can be used to remove the event listener\n     *         using the {@link #removeListenerById} method.\n     */\n    addListener(type, listener, self, capture) {\n      if (!this.$$disposed) {\n        return this.__Registration.addListener(\n          this,\n          type,\n          listener,\n          self,\n          capture\n        );\n      }\n\n      return null;\n    },\n\n    /**\n     * Add event listener to this object, which is only called once. After the\n     * listener is called the event listener gets removed.\n     *\n     * @param type {String} name of the event type\n     * @param listener {Function} event callback function\n     * @param context {Object ? window} reference to the 'this' variable inside the callback\n     * @param capture {Boolean ? false} Whether to attach the event to the\n     *         capturing phase or the bubbling phase of the event. The default is\n     *         to attach the event handler to the bubbling phase.\n     * @return {String} An opaque id, which can be used to remove the event listener\n     *         using the {@link #removeListenerById} method.\n     */\n    addListenerOnce(type, listener, context, capture) {\n      var self = this; // self is needed to remove the listener inside the callback\n      if (!context) {\n        context = this;\n      }\n      var id; // store id in closure context\n      var callback = function (e) {\n        self.removeListenerById(id);\n        listener.call(context, e);\n      };\n      // check for wrapped callback storage\n      if (!listener.$$wrapped_callback) {\n        listener.$$wrapped_callback = {};\n      }\n      // store the call for each type in case the listener is\n      // used for more than one type [BUG #8038]\n      listener.$$wrapped_callback[type + this.toHashCode()] = callback;\n      id = this.addListener(type, callback, context, capture);\n      return id;\n    },\n\n    /**\n     * Remove event listener from this object\n     *\n     * @param type {String} name of the event type\n     * @param listener {Function} event callback function\n     * @param self {Object ? null} reference to the 'this' variable inside the callback\n     * @param capture {Boolean} Whether to remove the event listener of\n     *   the bubbling or of the capturing phase.\n     * @return {Boolean} Whether the event was removed successfully (has existed)\n     */\n    removeListener(type, listener, self, capture) {\n      if (!this.$$disposed) {\n        // special handling for wrapped once listener\n        if (\n          listener.$$wrapped_callback &&\n          listener.$$wrapped_callback[type + this.$$hash]\n        ) {\n          var callback = listener.$$wrapped_callback[type + this.$$hash];\n          delete listener.$$wrapped_callback[type + this.$$hash];\n          listener = callback;\n        }\n        return this.__Registration.removeListener(\n          this,\n          type,\n          listener,\n          self,\n          capture\n        );\n      }\n      return false;\n    },\n\n    /**\n     * Removes an event listener from an event target by an id returned by\n     * {@link #addListener}\n     *\n     * @param id {String} The id returned by {@link #addListener}\n     * @return {Boolean} Whether the event was removed successfully (has existed)\n     */\n    removeListenerById(id) {\n      if (!this.$$disposed) {\n        return this.__Registration.removeListenerById(this, id);\n      }\n\n      return false;\n    },\n\n    /**\n     * Check if there are one or more listeners for an event type.\n     *\n     * @param type {String} name of the event type\n     * @param capture {Boolean ? false} Whether to check for listeners of\n     *         the bubbling or of the capturing phase.\n     * @return {Boolean} Whether the object has a listener of the given type.\n     */\n    hasListener(type, capture) {\n      return this.__Registration.hasListener(this, type, capture);\n    },\n\n    /**\n     * Dispatch an event on this object\n     *\n     * @param evt {qx.event.type.Event} event to dispatch\n     * @return {Boolean} Whether the event default was prevented or not.\n     *     Returns true, when the event was NOT prevented.\n     */\n    dispatchEvent(evt) {\n      if (!this.$$disposed) {\n        return this.__Registration.dispatchEvent(this, evt);\n      }\n\n      return true;\n    },\n\n    /** @type{Object<String,qx.Promise>} list of pending events, indexed by hash code */\n    __pendingEvents: null,\n\n    /** @type{qx.Promise} promise that callers are waiting on, ready for when all events are finished */\n    __promiseWaitForPendingEvents: null,\n\n    /**\n     * Internal helper method to track promises returned from event handlers\n     *\n     * @param {var} result the result from the event handler\n     * @returns {qx.Promise|var} the value to return\n     */\n    __trackPendingEvent(result) {\n      if (qx.core.Environment.get(\"qx.promise\")) {\n        if (!qx.Promise.isPromise(result)) {\n          return result;\n        }\n        if (!this.__pendingEvents) {\n          this.__pendingEvents = {};\n        }\n        if (!(result instanceof qx.Promise)) {\n          result = qx.Promise.resolve(result);\n        }\n        let hashCode = result.toHashCode();\n        let newPromise = result\n          .then(result => {\n            delete this.__pendingEvents[hashCode];\n            let promise = this.__promiseWaitForPendingEvents;\n            if (promise && Object.keys(this.__pendingEvents).length == 0) {\n              this.__pendingEvents = null;\n              this.__promiseWaitForPendingEvents = null;\n              promise.resolve();\n            }\n            return result;\n          })\n          .catch(err => {\n            delete this.__pendingEvents[hashCode];\n            let promise = this.__promiseWaitForPendingEvents;\n            if (promise && Object.keys(this.__pendingEvents).length == 0) {\n              this.__pendingEvents = null;\n              this.__promiseWaitForPendingEvents = null;\n              promise.reject(err);\n            }\n            throw err;\n          });\n        this.__pendingEvents[hashCode] = newPromise;\n        return newPromise;\n      } else {\n        return result;\n      }\n    },\n\n    /**\n     * Waits for all pending events to be resolved\n     */\n    async waitForPendingEvents() {\n      if (qx.core.Environment.get(\"qx.promise\")) {\n        if (!this.__pendingEvents) {\n          return;\n        }\n        if (!this.__promiseWaitForPendingEvents) {\n          this.__promiseWaitForPendingEvents = new qx.Promise();\n        }\n        let promise = this.__promiseWaitForPendingEvents;\n        await promise;\n      }\n    },\n\n    /**\n     * Creates and dispatches an event on this object.\n     *\n     * @param type {String} Event type to fire\n     * @param clazz {Class?qx.event.type.Event} The event class\n     * @param args {Array?null} Arguments, which will be passed to\n     *       the event's init method.\n     * @return {Boolean|qx.Promise} whether the event default was prevented or not.\n     *     Returns true, when the event was NOT prevented.\n     */\n    fireEvent(type, clazz, args) {\n      if (!this.$$disposed) {\n        return this.__trackPendingEvent(\n          this.__Registration.fireEvent(this, type, clazz, args)\n        );\n      }\n\n      return true;\n    },\n\n    /**\n     * Creates and dispatches an event on this object; equivalent to fireEvent, except that it\n     * always returns a promise\n     *\n     * @param type {String} Event type to fire\n     * @param clazz {Class?qx.event.type.Event} The event class\n     * @param args {Array?null} Arguments, which will be passed to\n     *       the event's init method.\n     * @return {qx.Promise} a promise aggregated from the event handlers;\n     *  if the default was prevented, the promise is rejected\n     */\n    fireEventAsync(type, clazz, args) {\n      if (!qx.core.Environment.get(\"qx.promise\")) {\n        throw new Error(\n          this.classname +\n            \".fireEventAsync not supported because qx.promise==false\"\n        );\n      }\n\n      if (!this.$$disposed) {\n        return this.__trackPendingEvent(\n          this.__Registration.fireEventAsync(this, type, clazz, args)\n        );\n      }\n\n      return qx.Promise.resolve(true);\n    },\n\n    /**\n     * Create an event object and dispatch it on this object.\n     * The event dispatched with this method does never bubble! Use only if you\n     * are sure that bubbling is not required.\n     *\n     * @param type {String} Event type to fire\n     * @param clazz {Class?qx.event.type.Event} The event class\n     * @param args {Array?null} Arguments, which will be passed to\n     *       the event's init method.\n     * @return {Boolean} Whether the event default was prevented or not.\n     *     Returns true, when the event was NOT prevented.\n     */\n    fireNonBubblingEvent(type, clazz, args) {\n      if (!this.$$disposed) {\n        return this.__trackPendingEvent(\n          this.__Registration.fireNonBubblingEvent(this, type, clazz, args)\n        );\n      }\n\n      return true;\n    },\n\n    /**\n     * Create an event object and dispatch it on this object; equivalent to fireNonBubblingEvent,\n     * except that it always returns a promise.\n     *\n     * The event dispatched with this method does never bubble! Use only if you\n     * are sure that bubbling is not required.\n     *\n     * @param type {String} Event type to fire\n     * @param clazz {Class?qx.event.type.Event} The event class\n     * @param args {Array?null} Arguments, which will be passed to\n     *       the event's init method.\n     * @return {qx.Promise} a promise aggregated from the event handlers;\n     *  if the default was prevented, the promise is rejected\n     */\n    fireNonBubblingEventAsync(type, clazz, args) {\n      if (!qx.core.Environment.get(\"qx.promise\")) {\n        throw new Error(\n          this.classname +\n            \".fireNonBubblingEventAsync not supported because qx.promise==false\"\n        );\n      }\n\n      if (!this.$$disposed) {\n        return this.__trackPendingEvent(\n          this.__Registration.fireNonBubblingEventAsync(this, type, clazz, args)\n        );\n      }\n\n      return qx.Promise.resolve(true);\n    },\n\n    /**\n     * Creates and dispatches an non-bubbling data event on this object.\n     *\n     * @param type {String} Event type to fire\n     * @param data {var} User defined data attached to the event object\n     * @param oldData {var?null} The event's old data (optional)\n     * @param cancelable {Boolean?false} Whether or not an event can have its default\n     *     action prevented. The default action can either be the browser's\n     *     default action of a native event (e.g. open the context menu on a\n     *     right click) or the default action of a qooxdoo class (e.g. close\n     *     the window widget). The default action can be prevented by calling\n     *     {@link qx.event.type.Event#preventDefault}\n     * @return {Boolean|qx.Promise} whether the event default was prevented or not.\n     *     Returns true, when the event was NOT prevented.\n     */\n    fireDataEvent(type, data, oldData, cancelable) {\n      if (!this.$$disposed) {\n        if (oldData === undefined) {\n          oldData = null;\n        }\n        return this.__trackPendingEvent(\n          this.__Registration.fireEvent(this, type, qx.event.type.Data, [\n            data,\n            oldData,\n            !!cancelable\n          ])\n        );\n      }\n\n      return true;\n    },\n\n    /**\n     * Creates and dispatches an non-bubbling data event on this object; equivalent to\n     * fireEvent, except that it always returns a promise.\n     *\n     * @param type {String} Event type to fire\n     * @param data {var} User defined data attached to the event object\n     * @param oldData {var?null} The event's old data (optional)\n     * @param cancelable {Boolean?false} Whether or not an event can have its default\n     *     action prevented. The default action can either be the browser's\n     *     default action of a native event (e.g. open the context menu on a\n     *     right click) or the default action of a qooxdoo class (e.g. close\n     *     the window widget). The default action can be prevented by calling\n     *     {@link qx.event.type.Event#preventDefault}\n     * @return {qx.Promise} a promise aggregated from the event handlers;\n     *  if the default was prevented, the promise is rejected\n     */\n    fireDataEventAsync(type, data, oldData, cancelable) {\n      if (!qx.core.Environment.get(\"qx.promise\")) {\n        throw new Error(\n          this.classname +\n            \".fireDataEventAsync not supported because qx.promise==false\"\n        );\n      }\n\n      if (!this.$$disposed) {\n        if (oldData === undefined) {\n          oldData = null;\n        }\n        return this.__trackPendingEvent(\n          this.__Registration.fireEventAsync(this, type, qx.event.type.Data, [\n            data,\n            oldData,\n            !!cancelable\n          ])\n        );\n      }\n\n      return qx.Promise.resolve(true);\n    }\n  }\n});\n"
  ],
  "mappings": ";+CACA;AAAA;AAAA;AAAA;EAAA;IAAA;MAAA;MAAA;MAAA;QAAA;QAAA;MAAA;MAAA;QAAA;MAAA;MAAA;MAAA;IAAA;EAAA;EADAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,gBAAgB,EAAE;IAChCC,OAAO,EAAE;MACP;MACAC,sBAAc,EAAEP,EAAE,CAACQ,KAAK,CAACC,YAAY;MAErC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,WAAW,uBAACC,IAAI,EAAEC,QAAQ,EAAEC,IAAI,EAAEC,OAAO,EAAE;QACzC,IAAI,CAAC,IAAI,CAACC,UAAU,EAAE;UACpB,OAAO,IAAI,CAACR,sBAAc,CAACG,WAAW,CACpC,IAAI,EACJC,IAAI,EACJC,QAAQ,EACRC,IAAI,EACJC,OAAO,CACR;QACH;QAEA,OAAO,IAAI;MACb,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIE,eAAe,2BAACL,IAAI,EAAEC,QAAQ,EAAEK,OAAO,EAAEH,OAAO,EAAE;QAChD,IAAID,IAAI,GAAG,IAAI,CAAC,CAAC;QACjB,IAAI,CAACI,OAAO,EAAE;UACZA,OAAO,GAAG,IAAI;QAChB;QACA,IAAIC,EAAE,CAAC,CAAC;QACR,IAAIC,QAAQ,GAAG,SAAXA,QAAQ,CAAaC,CAAC,EAAE;UAC1BP,IAAI,CAACQ,kBAAkB,CAACH,EAAE,CAAC;UAC3BN,QAAQ,CAACU,IAAI,CAACL,OAAO,EAAEG,CAAC,CAAC;QAC3B,CAAC;QACD;QACA,IAAI,CAACR,QAAQ,CAACW,kBAAkB,EAAE;UAChCX,QAAQ,CAACW,kBAAkB,GAAG,CAAC,CAAC;QAClC;QACA;QACA;QACAX,QAAQ,CAACW,kBAAkB,CAACZ,IAAI,GAAG,IAAI,CAACa,UAAU,EAAE,CAAC,GAAGL,QAAQ;QAChED,EAAE,GAAG,IAAI,CAACR,WAAW,CAACC,IAAI,EAAEQ,QAAQ,EAAEF,OAAO,EAAEH,OAAO,CAAC;QACvD,OAAOI,EAAE;MACX,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIO,cAAc,0BAACd,IAAI,EAAEC,QAAQ,EAAEC,IAAI,EAAEC,OAAO,EAAE;QAC5C,IAAI,CAAC,IAAI,CAACC,UAAU,EAAE;UACpB;UACA,IACEH,QAAQ,CAACW,kBAAkB,IAC3BX,QAAQ,CAACW,kBAAkB,CAACZ,IAAI,GAAG,IAAI,CAACe,MAAM,CAAC,EAC/C;YACA,IAAIP,QAAQ,GAAGP,QAAQ,CAACW,kBAAkB,CAACZ,IAAI,GAAG,IAAI,CAACe,MAAM,CAAC;YAC9D,OAAOd,QAAQ,CAACW,kBAAkB,CAACZ,IAAI,GAAG,IAAI,CAACe,MAAM,CAAC;YACtDd,QAAQ,GAAGO,QAAQ;UACrB;UACA,OAAO,IAAI,CAACZ,sBAAc,CAACkB,cAAc,CACvC,IAAI,EACJd,IAAI,EACJC,QAAQ,EACRC,IAAI,EACJC,OAAO,CACR;QACH;QACA,OAAO,KAAK;MACd,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;MACIO,kBAAkB,8BAACH,EAAE,EAAE;QACrB,IAAI,CAAC,IAAI,CAACH,UAAU,EAAE;UACpB,OAAO,IAAI,CAACR,sBAAc,CAACc,kBAAkB,CAAC,IAAI,EAAEH,EAAE,CAAC;QACzD;QAEA,OAAO,KAAK;MACd,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIS,WAAW,uBAAChB,IAAI,EAAEG,OAAO,EAAE;QACzB,OAAO,IAAI,CAACP,sBAAc,CAACoB,WAAW,CAAC,IAAI,EAAEhB,IAAI,EAAEG,OAAO,CAAC;MAC7D,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;MACIc,aAAa,yBAACC,GAAG,EAAE;QACjB,IAAI,CAAC,IAAI,CAACd,UAAU,EAAE;UACpB,OAAO,IAAI,CAACR,sBAAc,CAACqB,aAAa,CAAC,IAAI,EAAEC,GAAG,CAAC;QACrD;QAEA,OAAO,IAAI;MACb,CAAC;MAED;MACAC,uBAAe,EAAE,IAAI;MAErB;MACAC,qCAA6B,EAAE,IAAI;MAEnC;AACJ;AACA;AACA;AACA;AACA;MACIC,2BAAmB,uCAACC,MAAM,EAAE;QAAA;QACiB;UACzC,IAAI,CAACjC,EAAE,CAACkC,OAAO,CAACC,SAAS,CAACF,MAAM,CAAC,EAAE;YACjC,OAAOA,MAAM;UACf;UACA,IAAI,CAAC,IAAI,CAACH,uBAAe,EAAE;YACzB,IAAI,CAACA,uBAAe,GAAG,CAAC,CAAC;UAC3B;UACA,IAAI,EAAEG,MAAM,YAAYjC,EAAE,CAACkC,OAAO,CAAC,EAAE;YACnCD,MAAM,GAAGjC,EAAE,CAACkC,OAAO,CAACE,OAAO,CAACH,MAAM,CAAC;UACrC;UACA,IAAII,QAAQ,GAAGJ,MAAM,CAACT,UAAU,EAAE;UAClC,IAAIc,UAAU,GAAGL,MAAM,CACpBM,IAAI,CAAC,UAAAN,MAAM,EAAI;YACd,OAAO,KAAI,CAACH,uBAAe,CAACO,QAAQ,CAAC;YACrC,IAAIG,OAAO,GAAG,KAAI,CAACT,qCAA6B;YAChD,IAAIS,OAAO,IAAIC,MAAM,CAACC,IAAI,CAAC,KAAI,CAACZ,uBAAe,CAAC,CAACa,MAAM,IAAI,CAAC,EAAE;cAC5D,KAAI,CAACb,uBAAe,GAAG,IAAI;cAC3B,KAAI,CAACC,qCAA6B,GAAG,IAAI;cACzCS,OAAO,CAACJ,OAAO,EAAE;YACnB;YACA,OAAOH,MAAM;UACf,CAAC,CAAC,SACI,CAAC,UAAAW,GAAG,EAAI;YACZ,OAAO,KAAI,CAACd,uBAAe,CAACO,QAAQ,CAAC;YACrC,IAAIG,OAAO,GAAG,KAAI,CAACT,qCAA6B;YAChD,IAAIS,OAAO,IAAIC,MAAM,CAACC,IAAI,CAAC,KAAI,CAACZ,uBAAe,CAAC,CAACa,MAAM,IAAI,CAAC,EAAE;cAC5D,KAAI,CAACb,uBAAe,GAAG,IAAI;cAC3B,KAAI,CAACC,qCAA6B,GAAG,IAAI;cACzCS,OAAO,CAACK,MAAM,CAACD,GAAG,CAAC;YACrB;YACA,MAAMA,GAAG;UACX,CAAC,CAAC;UACJ,IAAI,CAACd,uBAAe,CAACO,QAAQ,CAAC,GAAGC,UAAU;UAC3C,OAAOA,UAAU;QACnB;MAGF,CAAC;MAED;AACJ;AACA;MACUQ,oBAAoB,kCAAG;QAAA;QAAA;UAAA;UAAA;YAAA;cAAA;gBAAA,IAEpB,MAAI,CAAChB,uBAAe;kBAAA;kBAAA;gBAAA;gBAAA;cAAA;gBAGzB,IAAI,CAAC,MAAI,CAACC,qCAA6B,EAAE;kBACvC,MAAI,CAACA,qCAA6B,GAAG,IAAI/B,EAAE,CAACkC,OAAO,EAAE;gBACvD;gBACIM,OAAO,GAAG,MAAI,CAACT,qCAA6B;gBAAA;gBAAA,OAC1CS,OAAO;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAEjB,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIO,SAAS,qBAACpC,IAAI,EAAEqC,KAAK,EAAEC,IAAI,EAAE;QAC3B,IAAI,CAAC,IAAI,CAAClC,UAAU,EAAE;UACpB,OAAO,IAAI,CAACiB,2BAAmB,CAC7B,IAAI,CAACzB,sBAAc,CAACwC,SAAS,CAAC,IAAI,EAAEpC,IAAI,EAAEqC,KAAK,EAAEC,IAAI,CAAC,CACvD;QACH;QAEA,OAAO,IAAI;MACb,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,cAAc,0BAACvC,IAAI,EAAEqC,KAAK,EAAEC,IAAI,EAAE;QAQhC,IAAI,CAAC,IAAI,CAAClC,UAAU,EAAE;UACpB,OAAO,IAAI,CAACiB,2BAAmB,CAC7B,IAAI,CAACzB,sBAAc,CAAC2C,cAAc,CAAC,IAAI,EAAEvC,IAAI,EAAEqC,KAAK,EAAEC,IAAI,CAAC,CAC5D;QACH;QAEA,OAAOjD,EAAE,CAACkC,OAAO,CAACE,OAAO,CAAC,IAAI,CAAC;MACjC,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIe,oBAAoB,gCAACxC,IAAI,EAAEqC,KAAK,EAAEC,IAAI,EAAE;QACtC,IAAI,CAAC,IAAI,CAAClC,UAAU,EAAE;UACpB,OAAO,IAAI,CAACiB,2BAAmB,CAC7B,IAAI,CAACzB,sBAAc,CAAC4C,oBAAoB,CAAC,IAAI,EAAExC,IAAI,EAAEqC,KAAK,EAAEC,IAAI,CAAC,CAClE;QACH;QAEA,OAAO,IAAI;MACb,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIG,yBAAyB,qCAACzC,IAAI,EAAEqC,KAAK,EAAEC,IAAI,EAAE;QAQ3C,IAAI,CAAC,IAAI,CAAClC,UAAU,EAAE;UACpB,OAAO,IAAI,CAACiB,2BAAmB,CAC7B,IAAI,CAACzB,sBAAc,CAAC6C,yBAAyB,CAAC,IAAI,EAAEzC,IAAI,EAAEqC,KAAK,EAAEC,IAAI,CAAC,CACvE;QACH;QAEA,OAAOjD,EAAE,CAACkC,OAAO,CAACE,OAAO,CAAC,IAAI,CAAC;MACjC,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIiB,aAAa,yBAAC1C,IAAI,EAAE2C,IAAI,EAAEC,OAAO,EAAEC,UAAU,EAAE;QAC7C,IAAI,CAAC,IAAI,CAACzC,UAAU,EAAE;UACpB,IAAIwC,OAAO,KAAKE,SAAS,EAAE;YACzBF,OAAO,GAAG,IAAI;UAChB;UACA,OAAO,IAAI,CAACvB,2BAAmB,CAC7B,IAAI,CAACzB,sBAAc,CAACwC,SAAS,CAAC,IAAI,EAAEpC,IAAI,EAAEX,EAAE,CAACQ,KAAK,CAACG,IAAI,CAAC+C,IAAI,EAAE,CAC5DJ,IAAI,EACJC,OAAO,EACP,CAAC,CAACC,UAAU,CACb,CAAC,CACH;QACH;QAEA,OAAO,IAAI;MACb,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIG,kBAAkB,8BAAChD,IAAI,EAAE2C,IAAI,EAAEC,OAAO,EAAEC,UAAU,EAAE;QAQlD,IAAI,CAAC,IAAI,CAACzC,UAAU,EAAE;UACpB,IAAIwC,OAAO,KAAKE,SAAS,EAAE;YACzBF,OAAO,GAAG,IAAI;UAChB;UACA,OAAO,IAAI,CAACvB,2BAAmB,CAC7B,IAAI,CAACzB,sBAAc,CAAC2C,cAAc,CAAC,IAAI,EAAEvC,IAAI,EAAEX,EAAE,CAACQ,KAAK,CAACG,IAAI,CAAC+C,IAAI,EAAE,CACjEJ,IAAI,EACJC,OAAO,EACP,CAAC,CAACC,UAAU,CACb,CAAC,CACH;QACH;QAEA,OAAOxD,EAAE,CAACkC,OAAO,CAACE,OAAO,CAAC,IAAI,CAAC;MACjC;IACF;EACF,CAAC,CAAC;EAzZFpC,EAAE,CAAC4D,IAAI,CAACC,MAAM,CAAC1D,aAAa,GAAGA,aAAa;AAAC"
}