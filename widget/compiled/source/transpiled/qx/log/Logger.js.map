{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "__level",
    "setLevel",
    "value",
    "getLevel",
    "setTreshold",
    "__buffer",
    "setMaxMessages",
    "getTreshold",
    "getMaxMessages",
    "__appenders",
    "__appendersByName",
    "__filters",
    "__id",
    "register",
    "appender",
    "$$id",
    "id",
    "appenderName",
    "classname",
    "entries",
    "getAllLogEvents",
    "i",
    "l",
    "length",
    "entry",
    "appenders",
    "__getAppenders",
    "loggerName",
    "level",
    "process",
    "unregister",
    "addFilter",
    "logger",
    "RegExp",
    "push",
    "loggerMatch",
    "resetFilters",
    "debug",
    "object",
    "message",
    "log",
    "Logger",
    "__log",
    "arguments",
    "info",
    "warn",
    "error",
    "trace",
    "isLoggerEnabled",
    "dev",
    "StackTrace",
    "getStackTrace",
    "args",
    "lang",
    "Array",
    "fromArguments",
    "join",
    "deprecatedMethodWarning",
    "fcn",
    "msg",
    "functionName",
    "Function",
    "getName",
    "deprecatedClassWarning",
    "clazz",
    "className",
    "deprecatedEventWarning",
    "event",
    "self",
    "deprecatedMixinWarning",
    "mixinName",
    "name",
    "deprecatedConstantWarning",
    "constant",
    "__defineGetter__",
    "constantValue",
    "deprecateMethodOverriding",
    "baseclass",
    "methodName",
    "constructor",
    "prototype",
    "hasOwnProperty",
    "superclass",
    "clear",
    "clearHistory",
    "RingBuffer",
    "__levels",
    "__appendersCache",
    "__getLoggerName",
    "Object",
    "keys",
    "start",
    "items",
    "__serialize",
    "time",
    "Date",
    "offset",
    "LOADSTART",
    "win",
    "window",
    "isQxCoreObject",
    "toHashCode",
    "$$type",
    "levels",
    "cacheId",
    "undefined",
    "filter",
    "test",
    "__detect",
    "type",
    "nodeType",
    "Error",
    "toString",
    "deep",
    "text",
    "nodeValue",
    "nodeName",
    "toLowerCase",
    "getStackTraceFromError",
    "basename",
    "temp",
    "sorted",
    "key",
    "sort",
    "number",
    "defer",
    "logs",
    "$$logs"
  ],
  "sources": [
    "C:/Users/dadovaz/AppData/Roaming/npm/node_modules/@qooxdoo/framework/source/class/qx/log/Logger.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * John Spackman (john.spackman@zenesis.com)\n\n************************************************************************ */\n\n/**\n * Main qooxdoo logging class.\n *\n * Used as central logging feature by qx.core.Object.\n *\n * Extremely modular and lightweight to support logging at bootstrap and\n * at shutdown as well.\n *\n * * Supports dynamic appenders to push the output to the user\n * * Supports buffering of the last 50 messages (configurable)\n * * Supports different debug levels (\"debug\", \"info\", \"warn\" or \"error\")\n * * Simple data serialization for incoming messages\n *\n * Typical use of this class is via qx.core.MLogging which is included into most\n * classes, so you would use \"this.debug(...)\" etc, but qx.log.Logger.debug(),\n * .warn(), .error(), .info(), and .trace() can be used directly for static code.\n *\n * The first parameter is expected to be the context object, ie the object which\n * is sending the log; this can be null but that will prevent the filtering from\n * filtering on class name so ideally it will be a real qx.core.Object derived\n * object.  Other parameters are any Javascript object which will be serialized\n * into the log message\n *\n * <pre class=\"javascript\">\n *  qx.log.Logger.warn(myObject, \"This is a message to log\", myParam, otherData);\n * </pre>\n *\n *\n * The output of logging is controlled by \"appenders\", which are classes that\n * accept a log message and output it somehow (see examples in qx.log.appender.*);\n * typical examples are qx.log.appender.Console which outputs to the browser\n * console, or qx.log.appender.Native which outputs messages into a popup\n * window as part of your Qooxdoo UI.\n *\n * While it's quick and easy to add logging calls to code as and when you need it,\n * it is often convenient to control which logging calls output messages at runtime\n * rather than having to edit code. @see qx.log.Logger#addFilter\n *\n * @require(qx.dev.StackTrace)\n */\nqx.Bootstrap.define(\"qx.log.Logger\", {\n  statics: {\n    /*\n    ---------------------------------------------------------------------------\n      CONFIGURATION\n    ---------------------------------------------------------------------------\n    */\n\n    __level: \"debug\",\n\n    /**\n     * Configures the minimum log level required for new messages.\n     *\n     * @param value {String} One of \"debug\", \"info\", \"warn\" or \"error\".\n     */\n    setLevel(value) {\n      this.__level = value;\n    },\n\n    /**\n     * Returns the currently configured minimum log level required for new\n     * messages.\n     *\n     * @return {Integer} Debug level\n     */\n    getLevel() {\n      return this.__level;\n    },\n\n    /**\n     * Configures the number of messages to be kept in the buffer.\n     *\n     * @param value {Integer} Any positive integer\n     */\n    setTreshold(value) {\n      this.__buffer.setMaxMessages(value);\n    },\n\n    /**\n     * Returns the currently configured number of messages to be kept in the\n     * buffer.\n     *\n     * @return {Integer} Treshold value\n     */\n    getTreshold() {\n      return this.__buffer.getMaxMessages();\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      APPENDER MANAGEMENT\n    ---------------------------------------------------------------------------\n    */\n\n    /** @type {Map} Map of all known appenders by ID */\n    __appenders: [],\n\n    /** @type {Map} Map of all known appenders by name */\n    __appendersByName: {},\n\n    /** @type {Array} Array of filters to apply when selecting appenders to append to */\n    __filters: [],\n\n    /** @type {Integer} Last free appender ID */\n    __id: 0,\n\n    /**\n     * Registers the given appender and inserts the last cached messages.\n     *\n     * Note that an appender is named by it's class name, unless it has a property\n     * called `appenderName`\n     *\n     * @param appender {Class} A static appender class supporting at\n     *   least a <code>process()</code> method to handle incoming messages.\n     */\n    register(appender) {\n      if (appender.$$id) {\n        return;\n      }\n\n      // Register appender\n      var id = this.__id++;\n      var appenderName = appender.appenderName || appender.classname;\n      this.__appenders[id] = appender;\n      this.__appendersByName[appenderName] = appender;\n      appender.$$id = id;\n\n      // Insert previous messages\n      var entries = this.__buffer.getAllLogEvents();\n      for (var i = 0, l = entries.length; i < l; i++) {\n        var entry = entries[i];\n\n        var appenders = this.__getAppenders(entry.loggerName, entry.level);\n        if (appenders[appenderName]) {\n          appender.process(entry);\n        }\n      }\n    },\n\n    /**\n     * Unregisters the given appender\n     *\n     * @param appender {Class} A static appender class\n     */\n    unregister(appender) {\n      var id = appender.$$id;\n      if (id == null) {\n        return;\n      }\n\n      var appenderName = appender.appenderName || appender.classname;\n      delete this.__appendersByName[appenderName];\n      delete this.__appenders[id];\n      delete appender.$$id;\n    },\n\n    /**\n     * Adds a filter that specifies the appenders to use for a given logger name (classname).\n     *\n     * By default, every log entry is output to all appenders but you can change this\n     * behaviour by calling qx.log.Logger.addFilter; every log message is associated\n     * with a class and a logging level (ie debug, warn, info, error, etc) and you can\n     * apply a filter on either one.\n     *\n     * For example, to restrict the output to only allow qx.ui.* classes to output debug\n     * logging information you would use this:\n     *\n     *  <pre class=\"javascript\">\n     *    qx.log.Logger.addFilter(/^qx\\.ui/, null, \"debug\");\n     *  </pre>\n     *\n     * Note that while the default is to log everything, as soon as you apply one filter\n     * you are specifying an exhaustive list of classes; so if you use the above example,\n     * the ONLY classes that will be able to log is qx.ui.*.  If you want to use multiple\n     * classes to the output, just add more addFilter calls.\n     *\n     * The logging level (eg \"debug\", \"error\", etc) is greater than or equal to - so in\n     * the above example, debug, error, warn, and info will be output but trace will not.\n     *\n     * The second parameter to addFilter is the classname of the appender to use; this\n     * allows you to specify that log messages only go to one destination; for example:\n     *\n     *  <pre class=\"javascript\">\n     *    qx.log.Logger.addFilter(/^qx\\.ui/, \"qx.log.appender.Console\", \"warn\");\n     *    qx.log.Logger.addFilter(/^qx\\.io/, \"qx.log.appender.Native\", \"debug\");\n     *    qx.log.Logger.addFilter(/^qx\\.io/, \"qx.log.appender.Console\", \"error\");\n     *  </pre>\n     *\n     * In this example, qx.ui.* will only go to the Console appender and only if a warning\n     * is issued; qx.io.* will go to Native for debug, error, warn, and info and to\n     * Console for error, warn, and info\n     *\n     * Note that an appender is named by it's class name, unless it has a property\n     * called `appenderName`.\n     *\n     * @param logger {String|RegExp} the pattern to match in the logger name\n     * @param appenderName {String?} the name of the appender class, if undefined then all appenders\n     * @param level {String?} the minimum logging level to use the appender, if undefined the default level is used\n     */\n    addFilter(logger, appenderName, level) {\n      if (typeof logger == \"string\") {\n        logger = new RegExp(logger);\n      }\n      this.__filters.push({\n        loggerMatch: logger,\n        level: level || this.__level,\n        appenderName: appenderName\n      });\n    },\n\n    /**\n     * Reset all filters\n     */\n    resetFilters() {\n      this.__filters = [];\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      USER METHODS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Sending a message at level \"debug\" to the logger.\n     *\n     * @param object {Object} Contextual object (either instance or static class)\n     * @param message {var} Any number of arguments supported. An argument may\n     *   have any JavaScript data type. All data is serialized immediately and\n     *   does not keep references to other objects.\n     */\n    debug(object, message) {\n      qx.log.Logger.__log(\"debug\", arguments);\n    },\n\n    /**\n     * Sending a message at level \"info\" to the logger.\n     *\n     * @param object {Object} Contextual object (either instance or static class)\n     * @param message {var} Any number of arguments supported. An argument may\n     *   have any JavaScript data type. All data is serialized immediately and\n     *   does not keep references to other objects.\n     */\n    info(object, message) {\n      qx.log.Logger.__log(\"info\", arguments);\n    },\n\n    /**\n     * Sending a message at level \"warn\" to the logger.\n     *\n     * @param object {Object} Contextual object (either instance or static class)\n     * @param message {var} Any number of arguments supported. An argument may\n     *   have any JavaScript data type. All data is serialized immediately and\n     *   does not keep references to other objects.\n     */\n    warn(object, message) {\n      qx.log.Logger.__log(\"warn\", arguments);\n    },\n\n    /**\n     * Sending a message at level \"error\" to the logger.\n     *\n     * @param object {Object} Contextual object (either instance or static class)\n     * @param message {var} Any number of arguments supported. An argument may\n     *   have any JavaScript data type. All data is serialized immediately and\n     *   does not keep references to other objects.\n     */\n    error(object, message) {\n      qx.log.Logger.__log(\"error\", arguments);\n    },\n\n    /**\n     * Prints the current stack trace at level \"info\"\n     *\n     * @param object {Object?} Contextual object (either instance or static class)\n     * @param message {var} Any number of arguments supported. An argument may\n     *   have any JavaScript data type. All data is serialized immediately and\n     *   does not keep references to other objects.\n     */\n    trace(object, message) {\n      if (qx.log.Logger.isLoggerEnabled(\"trace\", object)) {\n        var trace = qx.dev.StackTrace.getStackTrace();\n        var args = qx.lang.Array.fromArguments(arguments);\n        args.push(trace.join(\"\\n\"));\n        qx.log.Logger.__log(\"trace\", args);\n      }\n    },\n\n    /**\n     * Prints a method deprecation warning and a stack trace if the setting\n     * <code>qx.debug</code> is set to <code>true</code>.\n     *\n     * @param fcn {Function} reference to the deprecated function. This is\n     *     arguments.callee if the calling method is to be deprecated.\n     * @param msg {String?} Optional message to be printed.\n     */\n    deprecatedMethodWarning(fcn, msg) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        var functionName = qx.lang.Function.getName(fcn);\n        this.warn(\n          \"The method '\" +\n            functionName +\n            \"' is deprecated: \" +\n            (msg ||\n              \"Please consult the API documentation of this method for alternatives.\")\n        );\n\n        this.trace();\n      }\n    },\n\n    /**\n     * Prints a class deprecation warning and a stack trace if the setting\n     * <code>qx.debug</code> is set to <code>true</code>.\n     *\n     * @param clazz {Class} reference to the deprecated class.\n     * @param msg {String?} Optional message to be printed.\n     */\n    deprecatedClassWarning(clazz, msg) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        var className = clazz.classname || \"unknown\";\n        this.warn(\n          \"The class '\" +\n            className +\n            \"' is deprecated: \" +\n            (msg ||\n              \"Please consult the API documentation of this class for alternatives.\")\n        );\n\n        this.trace();\n      }\n    },\n\n    /**\n     * Prints an event deprecation warning and a stack trace if the setting\n     * <code>qx.debug</code> is set to <code>true</code>.\n     *\n     * @param clazz {Class} reference to the deprecated class.\n     * @param event {String} deprecated event name.\n     * @param msg {String?} Optional message to be printed.\n     */\n    deprecatedEventWarning(clazz, event, msg) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        var className = clazz.self ? clazz.self.classname : \"unknown\";\n        this.warn(\n          \"The event '\" +\n            (event || \"unknown\") +\n            \"' from class '\" +\n            className +\n            \"' is deprecated: \" +\n            (msg ||\n              \"Please consult the API documentation of this class for alternatives.\")\n        );\n\n        this.trace();\n      }\n    },\n\n    /**\n     * Prints a mixin deprecation warning and a stack trace if the setting\n     * <code>qx.debug</code> is set to <code>true</code>.\n     *\n     * @param clazz {Class} reference to the deprecated mixin.\n     * @param msg {String?} Optional message to be printed.\n     */\n    deprecatedMixinWarning(clazz, msg) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        var mixinName = clazz ? clazz.name : \"unknown\";\n        this.warn(\n          \"The mixin '\" +\n            mixinName +\n            \"' is deprecated: \" +\n            (msg ||\n              \"Please consult the API documentation of this class for alternatives.\")\n        );\n\n        this.trace();\n      }\n    },\n\n    /**\n     * Prints a constant deprecation warning and a stacktrace if the setting\n     * <code>qx.debug</code> is set to <code>true</code> AND the browser supports\n     * __defineGetter__!\n     *\n     * @param clazz {Class} The class the constant is attached to.\n     * @param constant {String} The name of the constant as string.\n     * @param msg {String} Optional message to be printed.\n     */\n    deprecatedConstantWarning(clazz, constant, msg) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        // check if __defineGetter__ is available\n        if (clazz.__defineGetter__) {\n          var self = this;\n          var constantValue = clazz[constant];\n          clazz.__defineGetter__(constant, function () {\n            self.warn(\n              \"The constant '\" +\n                constant +\n                \"' is deprecated: \" +\n                (msg ||\n                  \"Please consult the API documentation for alternatives.\")\n            );\n\n            self.trace();\n            return constantValue;\n          });\n        }\n      }\n    },\n\n    /**\n     * Prints a deprecation warning and a stacktrace when a subclass overrides\n     * the passed method name. The deprecation is only printed if the setting\n     * <code>qx.debug</code> is set to <code>true</code>.\n     *\n     *\n     * @param object {qx.core.Object} Instance to check for overriding.\n     * @param baseclass {Class} The baseclass as starting point.\n     * @param methodName {String} The method name which is deprecated for overriding.\n     * @param msg {String?} Optional message to be printed.\n     */\n    deprecateMethodOverriding(object, baseclass, methodName, msg) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        var clazz = object.constructor;\n\n        while (clazz.classname !== baseclass.classname) {\n          if (clazz.prototype.hasOwnProperty(methodName)) {\n            this.warn(\n              `The method ' ${clazz.classname}.${methodName}' overrides a deprecated method:\n              (msg || \"Please consult the API documentation for alternatives.\")\n              `\n            );\n\n            this.trace();\n            break;\n          }\n          clazz = clazz.superclass;\n        }\n      }\n    },\n\n    /**\n     * Deletes the current buffer. Does not influence message handling of the\n     * connected appenders.\n     *\n     */\n    clear() {\n      this.__buffer.clearHistory();\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      INTERNAL LOGGING IMPLEMENTATION\n    ---------------------------------------------------------------------------\n    */\n\n    /** @type {qx.log.appender.RingBuffer} Message buffer of previously fired messages. */\n    __buffer: new qx.log.appender.RingBuffer(50),\n\n    /** @type {Map} Numeric translation of log levels */\n    __levels: {\n      trace: 0,\n      debug: 1,\n      info: 2,\n      warn: 3,\n      error: 4\n    },\n\n    /** @type {Map} cache of appenders for a given logger and level */\n    __appendersCache: {},\n\n    /**\n     * Detects the name of the logger to use for an object\n     *\n     * @param object {Object} Contextual object (either instance or static class)\n     * @return {String} Logger name\n     */\n    __getLoggerName(object) {\n      if (object) {\n        if (object.classname) {\n          return object.classname;\n        }\n        if (typeof object == \"string\") {\n          return object;\n        }\n      }\n      return \"[default]\";\n    },\n\n    /**\n     * Detects whether a logger level is enabled for an object\n     *\n     * @param level {String} One of \"trace\", \"debug\", \"info\", \"warn\" or \"error\"\n     * @param object {Object} Contextual object (either instance or static class)\n     * @return {Boolean} True if the logger is enabled\n     */\n    isLoggerEnabled(level, object) {\n      var loggerName = this.__getLoggerName(object);\n      var appenders = this.__getAppenders(loggerName, level);\n      return !!Object.keys(appenders).length;\n    },\n\n    /**\n     * Internal logging main routine.\n     *\n     * @param level {String} One of \"trace\", \"debug\", \"info\", \"warn\" or \"error\"\n     * @param args {Array} List of other arguments, where the first is\n     *   taken as the context object.\n     */\n    __log(level, args) {\n      // Get object and determine appenders\n      var object = args.length < 2 ? null : args[0];\n      var loggerName = this.__getLoggerName(object);\n      var appenders = this.__getAppenders(loggerName, level);\n      if (!Object.keys(appenders).length) {\n        return;\n      }\n\n      // Serialize and cache\n      var start = object ? 1 : 0;\n      var items = [];\n      for (var i = start, l = args.length; i < l; i++) {\n        items.push(this.__serialize(args[i], true));\n      }\n\n      // Build entry\n      var time = new Date();\n      var entry = {\n        time: time,\n        offset: time - qx.Bootstrap.LOADSTART,\n        level: level,\n        loggerName: loggerName,\n        items: items,\n        // store window to allow cross frame logging\n        win: window\n      };\n\n      // Add relation fields\n      if (object) {\n        if (qx.Bootstrap.isQxCoreObject(object)) {\n          entry.object = object.toHashCode();\n        }\n        if (object.$$type) {\n          entry.clazz = object;\n        } else if (object.constructor) {\n          entry.clazz = object.constructor;\n        }\n      }\n\n      this.__buffer.process(entry);\n\n      // Send to appenders\n      for (var classname in appenders) {\n        appenders[classname].process(entry);\n      }\n    },\n\n    /**\n     * Finds the appenders for a given classname\n     *\n     * @param className {String} Name of the class\n     * @param level {String} the minimum logging level to use the appender\n     * @return {Array} list of appenders\n     */\n    __getAppenders(className, level) {\n      var levels = this.__levels;\n\n      // If no filters, then all appenders apply\n      if (!this.__filters.length) {\n        // Check the default level\n        if (levels[level] < levels[this.__level]) {\n          return [];\n        }\n        return this.__appendersByName;\n      }\n\n      // Check the cache\n      var cacheId = className + \"|\" + level;\n      var appenders = this.__appendersCache[cacheId];\n      if (appenders !== undefined) {\n        return appenders;\n      }\n\n      appenders = {};\n      for (var i = 0; i < this.__filters.length; i++) {\n        var filter = this.__filters[i];\n\n        // Filters only apply to certain levels\n        if (levels[level] < levels[filter.level]) {\n          continue;\n        }\n\n        // No duplicates\n        if (filter.appenderName && appenders[filter.appenderName]) {\n          continue;\n        }\n\n        // Test\n        if (!filter.loggerMatch || filter.loggerMatch.test(className)) {\n          if (filter.appenderName) {\n            appenders[filter.appenderName] =\n              this.__appendersByName[filter.appenderName];\n          } else {\n            return (this.__appendersCache[cacheId] = this.__appendersByName);\n          }\n        }\n      }\n\n      return (this.__appendersCache[cacheId] = appenders);\n    },\n\n    /**\n     * Detects the type of the variable given.\n     *\n     * @param value {var} Incoming value\n     * @return {String} Type of the incoming value. Possible values:\n     *   \"undefined\", \"null\", \"boolean\", \"number\", \"string\",\n     *   \"function\", \"array\", \"error\", \"map\",\n     *   \"class\", \"instance\", \"node\", \"stringify\", \"unknown\"\n     */\n    __detect(value) {\n      if (value === undefined) {\n        return \"undefined\";\n      } else if (value === null) {\n        return \"null\";\n      }\n\n      if (value.$$type) {\n        return \"class\";\n      }\n\n      var type = typeof value;\n\n      if (\n        type === \"function\" ||\n        type == \"string\" ||\n        type === \"number\" ||\n        type === \"boolean\"\n      ) {\n        return type;\n      } else if (type === \"object\") {\n        if (value.nodeType) {\n          return \"node\";\n          // In Gecko, DOMException doesn't inherit from Error\n        } else if (value instanceof Error || (value.name && value.message)) {\n          return \"error\";\n        } else if (value.classname) {\n          return \"instance\";\n        } else if (value instanceof Array) {\n          return \"array\";\n        } else if (value instanceof Date) {\n          return \"date\";\n        } else {\n          return \"map\";\n        }\n      }\n\n      if (value.toString) {\n        return \"stringify\";\n      }\n\n      return \"unknown\";\n    },\n\n    /**\n     * Serializes the incoming value. If it is a singular value, the result is\n     * a simple string. For an array or a map the result can also be a\n     * serialized string of a limited number of individual items.\n     *\n     * @param value {var} Incoming value\n     * @param deep {Boolean?false} Whether arrays and maps should be\n     *    serialized for a limited number of items\n     * @return {Map} Contains the keys <code>type</code>, <code>text</code> and\n     * <code>trace</code>.\n     */\n    __serialize(value, deep) {\n      var type = this.__detect(value);\n      var text = \"unknown\";\n      var trace = [];\n\n      switch (type) {\n        case \"null\":\n        case \"undefined\":\n          text = type;\n          break;\n\n        case \"string\":\n        case \"number\":\n        case \"boolean\":\n        case \"date\":\n          text = value;\n          break;\n\n        case \"node\":\n          if (value.nodeType === 9) {\n            text = \"document\";\n          } else if (value.nodeType === 3) {\n            text = \"text[\" + value.nodeValue + \"]\";\n          } else if (value.nodeType === 1) {\n            text = value.nodeName.toLowerCase();\n            if (value.id) {\n              text += \"#\" + value.id;\n            }\n          } else {\n            text = \"node\";\n          }\n          break;\n\n        case \"function\":\n          text = qx.lang.Function.getName(value) || type;\n          break;\n\n        case \"instance\":\n        case \"class\":\n        case \"stringify\":\n          text = value.toString();\n          break;\n\n        case \"error\":\n          trace = qx.dev.StackTrace.getStackTraceFromError(value);\n          text =\n            (value.basename ? value.basename + \": \" : \"\") + value.toString();\n          break;\n\n        case \"array\":\n          if (deep) {\n            text = [];\n            for (var i = 0, l = value.length; i < l; i++) {\n              if (text.length > 20) {\n                text.push(\"...(+\" + (l - i) + \")\");\n                break;\n              }\n\n              text.push(this.__serialize(value[i], false));\n            }\n          } else {\n            text = \"[...(\" + value.length + \")]\";\n          }\n          break;\n\n        case \"map\":\n          if (deep) {\n            var temp;\n\n            // Produce sorted key list\n            var sorted = [];\n            for (var key in value) {\n              sorted.push(key);\n            }\n            sorted.sort();\n\n            // Temporary text list\n            text = [];\n            for (var i = 0, l = sorted.length; i < l; i++) {\n              if (text.length > 20) {\n                text.push(\"...(+\" + (l - i) + \")\");\n                break;\n              }\n\n              // Additional storage of hash-key\n              key = sorted[i];\n              temp = this.__serialize(value[key], false);\n              temp.key = key;\n              text.push(temp);\n            }\n          } else {\n            var number = 0;\n            for (var key in value) {\n              number++;\n            }\n            text = \"{...(\" + number + \")}\";\n          }\n          break;\n      }\n\n      return {\n        type: type,\n        text: text,\n        trace: trace\n      };\n    }\n  },\n\n  defer(statics) {\n    var logs = qx.Bootstrap.$$logs;\n    for (var i = 0; i < logs.length; i++) {\n      statics.__log(logs[i][0], logs[i][1]);\n    }\n\n    qx.Bootstrap.debug = statics.debug;\n    qx.Bootstrap.info = statics.info;\n    qx.Bootstrap.warn = statics.warn;\n    qx.Bootstrap.error = statics.error;\n    qx.Bootstrap.trace = statics.trace;\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACC,SAAS,CAACG,MAAM,CAAC,eAAe,EAAE;IACnCC,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;;MAEIC,eAAO,EAAE,OAAO;MAEhB;AACJ;AACA;AACA;AACA;MACIC,QAAQ,oBAACC,KAAK,EAAE;QACd,IAAI,CAACF,eAAO,GAAGE,KAAK;MACtB,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;MACIC,QAAQ,sBAAG;QACT,OAAO,IAAI,CAACH,eAAO;MACrB,CAAC;MAED;AACJ;AACA;AACA;AACA;MACII,WAAW,uBAACF,KAAK,EAAE;QACjB,IAAI,CAACG,gBAAQ,CAACC,cAAc,CAACJ,KAAK,CAAC;MACrC,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;MACIK,WAAW,yBAAG;QACZ,OAAO,IAAI,CAACF,gBAAQ,CAACG,cAAc,EAAE;MACvC,CAAC;MAED;AACJ;AACA;AACA;AACA;;MAEI;MACAC,mBAAW,EAAE,EAAE;MAEf;MACAC,yBAAiB,EAAE,CAAC,CAAC;MAErB;MACAC,iBAAS,EAAE,EAAE;MAEb;MACAC,YAAI,EAAE,CAAC;MAEP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,QAAQ,oBAACC,QAAQ,EAAE;QACjB,IAAIA,QAAQ,CAACC,IAAI,EAAE;UACjB;QACF;;QAEA;QACA,IAAIC,EAAE,GAAG,IAAI,CAACJ,YAAI,EAAE;QACpB,IAAIK,YAAY,GAAGH,QAAQ,CAACG,YAAY,IAAIH,QAAQ,CAACI,SAAS;QAC9D,IAAI,CAACT,mBAAW,CAACO,EAAE,CAAC,GAAGF,QAAQ;QAC/B,IAAI,CAACJ,yBAAiB,CAACO,YAAY,CAAC,GAAGH,QAAQ;QAC/CA,QAAQ,CAACC,IAAI,GAAGC,EAAE;;QAElB;QACA,IAAIG,OAAO,GAAG,IAAI,CAACd,gBAAQ,CAACe,eAAe,EAAE;QAC7C,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGH,OAAO,CAACI,MAAM,EAAEF,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;UAC9C,IAAIG,KAAK,GAAGL,OAAO,CAACE,CAAC,CAAC;UAEtB,IAAII,SAAS,GAAG,IAAI,CAACC,sBAAc,CAACF,KAAK,CAACG,UAAU,EAAEH,KAAK,CAACI,KAAK,CAAC;UAClE,IAAIH,SAAS,CAACR,YAAY,CAAC,EAAE;YAC3BH,QAAQ,CAACe,OAAO,CAACL,KAAK,CAAC;UACzB;QACF;MACF,CAAC;MAED;AACJ;AACA;AACA;AACA;MACIM,UAAU,sBAAChB,QAAQ,EAAE;QACnB,IAAIE,EAAE,GAAGF,QAAQ,CAACC,IAAI;QACtB,IAAIC,EAAE,IAAI,IAAI,EAAE;UACd;QACF;QAEA,IAAIC,YAAY,GAAGH,QAAQ,CAACG,YAAY,IAAIH,QAAQ,CAACI,SAAS;QAC9D,OAAO,IAAI,CAACR,yBAAiB,CAACO,YAAY,CAAC;QAC3C,OAAO,IAAI,CAACR,mBAAW,CAACO,EAAE,CAAC;QAC3B,OAAOF,QAAQ,CAACC,IAAI;MACtB,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIgB,SAAS,qBAACC,MAAM,EAAEf,YAAY,EAAEW,KAAK,EAAE;QACrC,IAAI,OAAOI,MAAM,IAAI,QAAQ,EAAE;UAC7BA,MAAM,GAAG,IAAIC,MAAM,CAACD,MAAM,CAAC;QAC7B;QACA,IAAI,CAACrB,iBAAS,CAACuB,IAAI,CAAC;UAClBC,WAAW,EAAEH,MAAM;UACnBJ,KAAK,EAAEA,KAAK,IAAI,IAAI,CAAC5B,eAAO;UAC5BiB,YAAY,EAAEA;QAChB,CAAC,CAAC;MACJ,CAAC;MAED;AACJ;AACA;MACImB,YAAY,0BAAG;QACb,IAAI,CAACzB,iBAAS,GAAG,EAAE;MACrB,CAAC;MAED;AACJ;AACA;AACA;AACA;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACI0B,KAAK,iBAACC,MAAM,EAAEC,OAAO,EAAE;QACrB7C,EAAE,CAAC8C,GAAG,CAACC,MAAM,CAACC,aAAK,CAAC,OAAO,EAAEC,SAAS,CAAC;MACzC,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,IAAI,gBAACN,MAAM,EAAEC,OAAO,EAAE;QACpB7C,EAAE,CAAC8C,GAAG,CAACC,MAAM,CAACC,aAAK,CAAC,MAAM,EAAEC,SAAS,CAAC;MACxC,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIE,IAAI,gBAACP,MAAM,EAAEC,OAAO,EAAE;QACpB7C,EAAE,CAAC8C,GAAG,CAACC,MAAM,CAACC,aAAK,CAAC,MAAM,EAAEC,SAAS,CAAC;MACxC,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIG,KAAK,iBAACR,MAAM,EAAEC,OAAO,EAAE;QACrB7C,EAAE,CAAC8C,GAAG,CAACC,MAAM,CAACC,aAAK,CAAC,OAAO,EAAEC,SAAS,CAAC;MACzC,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACII,KAAK,iBAACT,MAAM,EAAEC,OAAO,EAAE;QACrB,IAAI7C,EAAE,CAAC8C,GAAG,CAACC,MAAM,CAACO,eAAe,CAAC,OAAO,EAAEV,MAAM,CAAC,EAAE;UAClD,IAAIS,KAAK,GAAGrD,EAAE,CAACuD,GAAG,CAACC,UAAU,CAACC,aAAa,EAAE;UAC7C,IAAIC,IAAI,GAAG1D,EAAE,CAAC2D,IAAI,CAACC,KAAK,CAACC,aAAa,CAACZ,SAAS,CAAC;UACjDS,IAAI,CAAClB,IAAI,CAACa,KAAK,CAACS,IAAI,CAAC,IAAI,CAAC,CAAC;UAC3B9D,EAAE,CAAC8C,GAAG,CAACC,MAAM,CAACC,aAAK,CAAC,OAAO,EAAEU,IAAI,CAAC;QACpC;MACF,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIK,uBAAuB,mCAACC,GAAG,EAAEC,GAAG,EAAE;QACS;UACvC,IAAIC,YAAY,GAAGlE,EAAE,CAAC2D,IAAI,CAACQ,QAAQ,CAACC,OAAO,CAACJ,GAAG,CAAC;UAChD,IAAI,CAACb,IAAI,CACP,cAAc,GACZe,YAAY,GACZ,mBAAmB,IAClBD,GAAG,IACF,uEAAuE,CAAC,CAC7E;UAED,IAAI,CAACZ,KAAK,EAAE;QACd;MACF,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;MACIgB,sBAAsB,kCAACC,KAAK,EAAEL,GAAG,EAAE;QACQ;UACvC,IAAIM,SAAS,GAAGD,KAAK,CAAC9C,SAAS,IAAI,SAAS;UAC5C,IAAI,CAAC2B,IAAI,CACP,aAAa,GACXoB,SAAS,GACT,mBAAmB,IAClBN,GAAG,IACF,sEAAsE,CAAC,CAC5E;UAED,IAAI,CAACZ,KAAK,EAAE;QACd;MACF,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACImB,sBAAsB,kCAACF,KAAK,EAAEG,KAAK,EAAER,GAAG,EAAE;QACC;UACvC,IAAIM,SAAS,GAAGD,KAAK,CAACI,IAAI,GAAGJ,KAAK,CAACI,IAAI,CAAClD,SAAS,GAAG,SAAS;UAC7D,IAAI,CAAC2B,IAAI,CACP,aAAa,IACVsB,KAAK,IAAI,SAAS,CAAC,GACpB,gBAAgB,GAChBF,SAAS,GACT,mBAAmB,IAClBN,GAAG,IACF,sEAAsE,CAAC,CAC5E;UAED,IAAI,CAACZ,KAAK,EAAE;QACd;MACF,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;MACIsB,sBAAsB,kCAACL,KAAK,EAAEL,GAAG,EAAE;QACQ;UACvC,IAAIW,SAAS,GAAGN,KAAK,GAAGA,KAAK,CAACO,IAAI,GAAG,SAAS;UAC9C,IAAI,CAAC1B,IAAI,CACP,aAAa,GACXyB,SAAS,GACT,mBAAmB,IAClBX,GAAG,IACF,sEAAsE,CAAC,CAC5E;UAED,IAAI,CAACZ,KAAK,EAAE;QACd;MACF,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIyB,yBAAyB,qCAACR,KAAK,EAAES,QAAQ,EAAEd,GAAG,EAAE;QACL;UACvC;UACA,IAAIK,KAAK,CAACU,gBAAgB,EAAE;YAC1B,IAAIN,IAAI,GAAG,IAAI;YACf,IAAIO,aAAa,GAAGX,KAAK,CAACS,QAAQ,CAAC;YACnCT,KAAK,CAACU,gBAAgB,CAACD,QAAQ,EAAE,YAAY;cAC3CL,IAAI,CAACvB,IAAI,CACP,gBAAgB,GACd4B,QAAQ,GACR,mBAAmB,IAClBd,GAAG,IACF,wDAAwD,CAAC,CAC9D;cAEDS,IAAI,CAACrB,KAAK,EAAE;cACZ,OAAO4B,aAAa;YACtB,CAAC,CAAC;UACJ;QACF;MACF,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,yBAAyB,qCAACtC,MAAM,EAAEuC,SAAS,EAAEC,UAAU,EAAEnB,GAAG,EAAE;QACnB;UACvC,IAAIK,KAAK,GAAG1B,MAAM,CAACyC,WAAW;UAE9B,OAAOf,KAAK,CAAC9C,SAAS,KAAK2D,SAAS,CAAC3D,SAAS,EAAE;YAC9C,IAAI8C,KAAK,CAACgB,SAAS,CAACC,cAAc,CAACH,UAAU,CAAC,EAAE;cAC9C,IAAI,CAACjC,IAAI,wBACSmB,KAAK,CAAC9C,SAAS,cAAI4D,UAAU,yIAG9C;cAED,IAAI,CAAC/B,KAAK,EAAE;cACZ;YACF;YACAiB,KAAK,GAAGA,KAAK,CAACkB,UAAU;UAC1B;QACF;MACF,CAAC;MAED;AACJ;AACA;AACA;AACA;MACIC,KAAK,mBAAG;QACN,IAAI,CAAC9E,gBAAQ,CAAC+E,YAAY,EAAE;MAC9B,CAAC;MAED;AACJ;AACA;AACA;AACA;;MAEI;MACA/E,gBAAQ,EAAE,IAAIX,EAAE,CAAC8C,GAAG,CAAC1B,QAAQ,CAACuE,UAAU,CAAC,EAAE,CAAC;MAE5C;MACAC,gBAAQ,EAAE;QACRvC,KAAK,EAAE,CAAC;QACRV,KAAK,EAAE,CAAC;QACRO,IAAI,EAAE,CAAC;QACPC,IAAI,EAAE,CAAC;QACPC,KAAK,EAAE;MACT,CAAC;MAED;MACAyC,wBAAgB,EAAE,CAAC,CAAC;MAEpB;AACJ;AACA;AACA;AACA;AACA;MACIC,wBAAe,oCAAClD,MAAM,EAAE;QACtB,IAAIA,MAAM,EAAE;UACV,IAAIA,MAAM,CAACpB,SAAS,EAAE;YACpB,OAAOoB,MAAM,CAACpB,SAAS;UACzB;UACA,IAAI,OAAOoB,MAAM,IAAI,QAAQ,EAAE;YAC7B,OAAOA,MAAM;UACf;QACF;QACA,OAAO,WAAW;MACpB,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;MACIU,eAAe,2BAACpB,KAAK,EAAEU,MAAM,EAAE;QAC7B,IAAIX,UAAU,GAAG,IAAI,CAAC6D,wBAAe,CAAClD,MAAM,CAAC;QAC7C,IAAIb,SAAS,GAAG,IAAI,CAACC,sBAAc,CAACC,UAAU,EAAEC,KAAK,CAAC;QACtD,OAAO,CAAC,CAAC6D,MAAM,CAACC,IAAI,CAACjE,SAAS,CAAC,CAACF,MAAM;MACxC,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;MACImB,aAAK,yBAACd,KAAK,EAAEwB,IAAI,EAAE;QACjB;QACA,IAAId,MAAM,GAAGc,IAAI,CAAC7B,MAAM,GAAG,CAAC,GAAG,IAAI,GAAG6B,IAAI,CAAC,CAAC,CAAC;QAC7C,IAAIzB,UAAU,GAAG,IAAI,CAAC6D,wBAAe,CAAClD,MAAM,CAAC;QAC7C,IAAIb,SAAS,GAAG,IAAI,CAACC,sBAAc,CAACC,UAAU,EAAEC,KAAK,CAAC;QACtD,IAAI,CAAC6D,MAAM,CAACC,IAAI,CAACjE,SAAS,CAAC,CAACF,MAAM,EAAE;UAClC;QACF;;QAEA;QACA,IAAIoE,KAAK,GAAGrD,MAAM,GAAG,CAAC,GAAG,CAAC;QAC1B,IAAIsD,KAAK,GAAG,EAAE;QACd,KAAK,IAAIvE,CAAC,GAAGsE,KAAK,EAAErE,CAAC,GAAG8B,IAAI,CAAC7B,MAAM,EAAEF,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;UAC/CuE,KAAK,CAAC1D,IAAI,CAAC,IAAI,CAAC2D,oBAAW,CAACzC,IAAI,CAAC/B,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;QAC7C;;QAEA;QACA,IAAIyE,IAAI,GAAG,IAAIC,IAAI,EAAE;QACrB,IAAIvE,KAAK,GAAG;UACVsE,IAAI,EAAEA,IAAI;UACVE,MAAM,EAAEF,IAAI,GAAGpG,EAAE,CAACC,SAAS,CAACsG,SAAS;UACrCrE,KAAK,EAAEA,KAAK;UACZD,UAAU,EAAEA,UAAU;UACtBiE,KAAK,EAAEA,KAAK;UACZ;UACAM,GAAG,EAAEC;QACP,CAAC;;QAED;QACA,IAAI7D,MAAM,EAAE;UACV,IAAI5C,EAAE,CAACC,SAAS,CAACyG,cAAc,CAAC9D,MAAM,CAAC,EAAE;YACvCd,KAAK,CAACc,MAAM,GAAGA,MAAM,CAAC+D,UAAU,EAAE;UACpC;UACA,IAAI/D,MAAM,CAACgE,MAAM,EAAE;YACjB9E,KAAK,CAACwC,KAAK,GAAG1B,MAAM;UACtB,CAAC,MAAM,IAAIA,MAAM,CAACyC,WAAW,EAAE;YAC7BvD,KAAK,CAACwC,KAAK,GAAG1B,MAAM,CAACyC,WAAW;UAClC;QACF;QAEA,IAAI,CAAC1E,gBAAQ,CAACwB,OAAO,CAACL,KAAK,CAAC;;QAE5B;QACA,KAAK,IAAIN,SAAS,IAAIO,SAAS,EAAE;UAC/BA,SAAS,CAACP,SAAS,CAAC,CAACW,OAAO,CAACL,KAAK,CAAC;QACrC;MACF,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;MACIE,sBAAc,kCAACuC,SAAS,EAAErC,KAAK,EAAE;QAC/B,IAAI2E,MAAM,GAAG,IAAI,CAACjB,gBAAQ;;QAE1B;QACA,IAAI,CAAC,IAAI,CAAC3E,iBAAS,CAACY,MAAM,EAAE;UAC1B;UACA,IAAIgF,MAAM,CAAC3E,KAAK,CAAC,GAAG2E,MAAM,CAAC,IAAI,CAACvG,eAAO,CAAC,EAAE;YACxC,OAAO,EAAE;UACX;UACA,OAAO,IAAI,CAACU,yBAAiB;QAC/B;;QAEA;QACA,IAAI8F,OAAO,GAAGvC,SAAS,GAAG,GAAG,GAAGrC,KAAK;QACrC,IAAIH,SAAS,GAAG,IAAI,CAAC8D,wBAAgB,CAACiB,OAAO,CAAC;QAC9C,IAAI/E,SAAS,KAAKgF,SAAS,EAAE;UAC3B,OAAOhF,SAAS;QAClB;QAEAA,SAAS,GAAG,CAAC,CAAC;QACd,KAAK,IAAIJ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACV,iBAAS,CAACY,MAAM,EAAEF,CAAC,EAAE,EAAE;UAC9C,IAAIqF,MAAM,GAAG,IAAI,CAAC/F,iBAAS,CAACU,CAAC,CAAC;;UAE9B;UACA,IAAIkF,MAAM,CAAC3E,KAAK,CAAC,GAAG2E,MAAM,CAACG,MAAM,CAAC9E,KAAK,CAAC,EAAE;YACxC;UACF;;UAEA;UACA,IAAI8E,MAAM,CAACzF,YAAY,IAAIQ,SAAS,CAACiF,MAAM,CAACzF,YAAY,CAAC,EAAE;YACzD;UACF;;UAEA;UACA,IAAI,CAACyF,MAAM,CAACvE,WAAW,IAAIuE,MAAM,CAACvE,WAAW,CAACwE,IAAI,CAAC1C,SAAS,CAAC,EAAE;YAC7D,IAAIyC,MAAM,CAACzF,YAAY,EAAE;cACvBQ,SAAS,CAACiF,MAAM,CAACzF,YAAY,CAAC,GAC5B,IAAI,CAACP,yBAAiB,CAACgG,MAAM,CAACzF,YAAY,CAAC;YAC/C,CAAC,MAAM;cACL,OAAQ,IAAI,CAACsE,wBAAgB,CAACiB,OAAO,CAAC,GAAG,IAAI,CAAC9F,yBAAiB;YACjE;UACF;QACF;QAEA,OAAQ,IAAI,CAAC6E,wBAAgB,CAACiB,OAAO,CAAC,GAAG/E,SAAS;MACpD,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACImF,iBAAQ,6BAAC1G,KAAK,EAAE;QACd,IAAIA,KAAK,KAAKuG,SAAS,EAAE;UACvB,OAAO,WAAW;QACpB,CAAC,MAAM,IAAIvG,KAAK,KAAK,IAAI,EAAE;UACzB,OAAO,MAAM;QACf;QAEA,IAAIA,KAAK,CAACoG,MAAM,EAAE;UAChB,OAAO,OAAO;QAChB;QAEA,IAAIO,IAAI,WAAU3G,KAAK;QAEvB,IACE2G,IAAI,KAAK,UAAU,IACnBA,IAAI,IAAI,QAAQ,IAChBA,IAAI,KAAK,QAAQ,IACjBA,IAAI,KAAK,SAAS,EAClB;UACA,OAAOA,IAAI;QACb,CAAC,MAAM,IAAIA,IAAI,KAAK,QAAQ,EAAE;UAC5B,IAAI3G,KAAK,CAAC4G,QAAQ,EAAE;YAClB,OAAO,MAAM;YACb;UACF,CAAC,MAAM,IAAI5G,KAAK,YAAY6G,KAAK,IAAK7G,KAAK,CAACqE,IAAI,IAAIrE,KAAK,CAACqC,OAAQ,EAAE;YAClE,OAAO,OAAO;UAChB,CAAC,MAAM,IAAIrC,KAAK,CAACgB,SAAS,EAAE;YAC1B,OAAO,UAAU;UACnB,CAAC,MAAM,IAAIhB,KAAK,YAAYoD,KAAK,EAAE;YACjC,OAAO,OAAO;UAChB,CAAC,MAAM,IAAIpD,KAAK,YAAY6F,IAAI,EAAE;YAChC,OAAO,MAAM;UACf,CAAC,MAAM;YACL,OAAO,KAAK;UACd;QACF;QAEA,IAAI7F,KAAK,CAAC8G,QAAQ,EAAE;UAClB,OAAO,WAAW;QACpB;QAEA,OAAO,SAAS;MAClB,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACInB,oBAAW,gCAAC3F,KAAK,EAAE+G,IAAI,EAAE;QACvB,IAAIJ,IAAI,GAAG,IAAI,CAACD,iBAAQ,CAAC1G,KAAK,CAAC;QAC/B,IAAIgH,IAAI,GAAG,SAAS;QACpB,IAAInE,KAAK,GAAG,EAAE;QAEd,QAAQ8D,IAAI;UACV,KAAK,MAAM;UACX,KAAK,WAAW;YACdK,IAAI,GAAGL,IAAI;YACX;UAEF,KAAK,QAAQ;UACb,KAAK,QAAQ;UACb,KAAK,SAAS;UACd,KAAK,MAAM;YACTK,IAAI,GAAGhH,KAAK;YACZ;UAEF,KAAK,MAAM;YACT,IAAIA,KAAK,CAAC4G,QAAQ,KAAK,CAAC,EAAE;cACxBI,IAAI,GAAG,UAAU;YACnB,CAAC,MAAM,IAAIhH,KAAK,CAAC4G,QAAQ,KAAK,CAAC,EAAE;cAC/BI,IAAI,GAAG,OAAO,GAAGhH,KAAK,CAACiH,SAAS,GAAG,GAAG;YACxC,CAAC,MAAM,IAAIjH,KAAK,CAAC4G,QAAQ,KAAK,CAAC,EAAE;cAC/BI,IAAI,GAAGhH,KAAK,CAACkH,QAAQ,CAACC,WAAW,EAAE;cACnC,IAAInH,KAAK,CAACc,EAAE,EAAE;gBACZkG,IAAI,IAAI,GAAG,GAAGhH,KAAK,CAACc,EAAE;cACxB;YACF,CAAC,MAAM;cACLkG,IAAI,GAAG,MAAM;YACf;YACA;UAEF,KAAK,UAAU;YACbA,IAAI,GAAGxH,EAAE,CAAC2D,IAAI,CAACQ,QAAQ,CAACC,OAAO,CAAC5D,KAAK,CAAC,IAAI2G,IAAI;YAC9C;UAEF,KAAK,UAAU;UACf,KAAK,OAAO;UACZ,KAAK,WAAW;YACdK,IAAI,GAAGhH,KAAK,CAAC8G,QAAQ,EAAE;YACvB;UAEF,KAAK,OAAO;YACVjE,KAAK,GAAGrD,EAAE,CAACuD,GAAG,CAACC,UAAU,CAACoE,sBAAsB,CAACpH,KAAK,CAAC;YACvDgH,IAAI,GACF,CAAChH,KAAK,CAACqH,QAAQ,GAAGrH,KAAK,CAACqH,QAAQ,GAAG,IAAI,GAAG,EAAE,IAAIrH,KAAK,CAAC8G,QAAQ,EAAE;YAClE;UAEF,KAAK,OAAO;YACV,IAAIC,IAAI,EAAE;cACRC,IAAI,GAAG,EAAE;cACT,KAAK,IAAI7F,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGpB,KAAK,CAACqB,MAAM,EAAEF,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;gBAC5C,IAAI6F,IAAI,CAAC3F,MAAM,GAAG,EAAE,EAAE;kBACpB2F,IAAI,CAAChF,IAAI,CAAC,OAAO,IAAIZ,CAAC,GAAGD,CAAC,CAAC,GAAG,GAAG,CAAC;kBAClC;gBACF;gBAEA6F,IAAI,CAAChF,IAAI,CAAC,IAAI,CAAC2D,oBAAW,CAAC3F,KAAK,CAACmB,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;cAC9C;YACF,CAAC,MAAM;cACL6F,IAAI,GAAG,OAAO,GAAGhH,KAAK,CAACqB,MAAM,GAAG,IAAI;YACtC;YACA;UAEF,KAAK,KAAK;YACR,IAAI0F,IAAI,EAAE;cACR,IAAIO,IAAI;;cAER;cACA,IAAIC,MAAM,GAAG,EAAE;cACf,KAAK,IAAIC,GAAG,IAAIxH,KAAK,EAAE;gBACrBuH,MAAM,CAACvF,IAAI,CAACwF,GAAG,CAAC;cAClB;cACAD,MAAM,CAACE,IAAI,EAAE;;cAEb;cACAT,IAAI,GAAG,EAAE;cACT,KAAK,IAAI7F,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGmG,MAAM,CAAClG,MAAM,EAAEF,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;gBAC7C,IAAI6F,IAAI,CAAC3F,MAAM,GAAG,EAAE,EAAE;kBACpB2F,IAAI,CAAChF,IAAI,CAAC,OAAO,IAAIZ,CAAC,GAAGD,CAAC,CAAC,GAAG,GAAG,CAAC;kBAClC;gBACF;;gBAEA;gBACAqG,GAAG,GAAGD,MAAM,CAACpG,CAAC,CAAC;gBACfmG,IAAI,GAAG,IAAI,CAAC3B,oBAAW,CAAC3F,KAAK,CAACwH,GAAG,CAAC,EAAE,KAAK,CAAC;gBAC1CF,IAAI,CAACE,GAAG,GAAGA,GAAG;gBACdR,IAAI,CAAChF,IAAI,CAACsF,IAAI,CAAC;cACjB;YACF,CAAC,MAAM;cACL,IAAII,MAAM,GAAG,CAAC;cACd,KAAK,IAAIF,GAAG,IAAIxH,KAAK,EAAE;gBACrB0H,MAAM,EAAE;cACV;cACAV,IAAI,GAAG,OAAO,GAAGU,MAAM,GAAG,IAAI;YAChC;YACA;QAAM;QAGV,OAAO;UACLf,IAAI,EAAEA,IAAI;UACVK,IAAI,EAAEA,IAAI;UACVnE,KAAK,EAAEA;QACT,CAAC;MACH;IACF,CAAC;IAED8E,KAAK,iBAAC9H,OAAO,EAAE;MACb,IAAI+H,IAAI,GAAGpI,EAAE,CAACC,SAAS,CAACoI,MAAM;MAC9B,KAAK,IAAI1G,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGyG,IAAI,CAACvG,MAAM,EAAEF,CAAC,EAAE,EAAE;QACpCtB,OAAO,CAAC2C,aAAK,CAACoF,IAAI,CAACzG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEyG,IAAI,CAACzG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACvC;MAEA3B,EAAE,CAACC,SAAS,CAAC0C,KAAK,GAAGtC,OAAO,CAACsC,KAAK;MAClC3C,EAAE,CAACC,SAAS,CAACiD,IAAI,GAAG7C,OAAO,CAAC6C,IAAI;MAChClD,EAAE,CAACC,SAAS,CAACkD,IAAI,GAAG9C,OAAO,CAAC8C,IAAI;MAChCnD,EAAE,CAACC,SAAS,CAACmD,KAAK,GAAG/C,OAAO,CAAC+C,KAAK;MAClCpD,EAAE,CAACC,SAAS,CAACoD,KAAK,GAAGhD,OAAO,CAACgD,KAAK;IACpC;EACF,CAAC,CAAC;EA/yBFrD,EAAE,CAAC8C,GAAG,CAACC,MAAM,CAAC5C,aAAa,GAAGA,aAAa;AAAC"
}