{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "statics",
    "__mgr",
    "locale",
    "Manager",
    "getInstance",
    "getAmMarker",
    "localize",
    "getPmMarker",
    "getDayNames",
    "length",
    "context",
    "withFallback",
    "core",
    "Assert",
    "assertInArray",
    "days",
    "names",
    "i",
    "key",
    "push",
    "__localizeWithFallback",
    "getDayName",
    "day",
    "assertInteger",
    "assertInRange",
    "getMonthNames",
    "getMonthName",
    "month",
    "getDateFormat",
    "size",
    "getDateTimeFormat",
    "canonical",
    "fallback",
    "localizedFormat",
    "getTimeFormat",
    "Date",
    "Error",
    "getWeekStart",
    "weekStart",
    "MV",
    "AE",
    "AF",
    "BH",
    "DJ",
    "DZ",
    "EG",
    "ER",
    "ET",
    "IQ",
    "IR",
    "JO",
    "KE",
    "KW",
    "LB",
    "LY",
    "MA",
    "OM",
    "QA",
    "SA",
    "SD",
    "SO",
    "TN",
    "YE",
    "AS",
    "AU",
    "AZ",
    "BW",
    "CA",
    "CN",
    "FO",
    "GE",
    "GL",
    "GU",
    "HK",
    "IE",
    "IL",
    "IS",
    "JM",
    "JP",
    "KG",
    "KR",
    "LA",
    "MH",
    "MN",
    "MO",
    "MP",
    "MT",
    "NZ",
    "PH",
    "PK",
    "SG",
    "TH",
    "TT",
    "TW",
    "UM",
    "US",
    "UZ",
    "VI",
    "ZA",
    "ZW",
    "MW",
    "NG",
    "TJ",
    "territory",
    "_getTerritory",
    "getWeekendStart",
    "weekendStart",
    "SY",
    "IN",
    "getWeekendEnd",
    "weekendEnd",
    "isWeekend",
    "split",
    "getTerritory",
    "getLanguage",
    "toUpperCase",
    "fallbackContext",
    "localizedString",
    "newKey",
    "replace"
  ],
  "sources": [
    "C:/Users/dadovaz/AppData/Roaming/npm/node_modules/@qooxdoo/framework/source/class/qx/locale/Date.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Static class that provides localized date information (like names of week\n * days, AM/PM markers, start of week, etc.).\n *\n * @cldr()\n */\nqx.Class.define(\"qx.locale.Date\", {\n  statics: {\n    /**\n     * Reference to the locale manager.\n     *\n     * @internal\n     */\n    __mgr: qx.locale.Manager.getInstance(),\n\n    /**\n     * Get AM marker for time definitions\n     *\n     * @param locale {String} optional locale to be used\n     * @return {String} translated AM marker.\n     */\n    getAmMarker(locale) {\n      return this.__mgr.localize(\"cldr_am\", [], locale);\n    },\n\n    /**\n     * Get PM marker for time definitions\n     *\n     * @param locale {String} optional locale to be used\n     * @return {String} translated PM marker.\n     */\n    getPmMarker(locale) {\n      return this.__mgr.localize(\"cldr_pm\", [], locale);\n    },\n\n    /**\n     * Return localized names of day names\n     *\n     * @param length {String} format of the day names.\n     *       Possible values: \"abbreviated\", \"narrow\", \"wide\"\n     * @param locale {String} optional locale to be used\n     * @param context {String} (default: \"format\") intended context.\n     *       Possible values: \"format\", \"stand-alone\"\n     * @param withFallback {Boolean?} if true, the previous parameter's other value is tried\n     * in order to find a localized name for the day\n     * @return {String[]} array of localized day names starting with sunday.\n     */\n    getDayNames(length, locale, context, withFallback) {\n      var context = context ? context : \"format\";\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertInArray(length, [\"abbreviated\", \"narrow\", \"wide\"]);\n        qx.core.Assert.assertInArray(context, [\"format\", \"stand-alone\"]);\n      }\n\n      var days = [\"sun\", \"mon\", \"tue\", \"wed\", \"thu\", \"fri\", \"sat\"];\n\n      var names = [];\n\n      for (var i = 0; i < days.length; i++) {\n        var key = \"cldr_day_\" + context + \"_\" + length + \"_\" + days[i];\n        names.push(\n          withFallback\n            ? this.__localizeWithFallback(\n                context,\n                context === \"format\" ? \"stand-alone\" : \"format\",\n                key,\n                locale\n              )\n            : this.__mgr.localize(key, [], locale)\n        );\n      }\n\n      return names;\n    },\n\n    /**\n     * Return localized name of a week day name\n     *\n     * @param length {String} format of the day name.\n     *       Possible values: \"abbreviated\", \"narrow\", \"wide\"\n     * @param day {Integer} day number. 0=sunday, 1=monday, ...\n     * @param locale {String} optional locale to be used\n     * @param context {String} (default: \"format\") intended context.\n     *       Possible values: \"format\", \"stand-alone\"\n     * @param withFallback {Boolean?} if true, the previous parameter's other value is tried\n     * in order to find a localized name for the day\n     * @return {String} localized day name\n     */\n    getDayName(length, day, locale, context, withFallback) {\n      var context = context ? context : \"format\";\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertInArray(length, [\"abbreviated\", \"narrow\", \"wide\"]);\n        qx.core.Assert.assertInteger(day);\n        qx.core.Assert.assertInRange(day, 0, 6);\n        qx.core.Assert.assertInArray(context, [\"format\", \"stand-alone\"]);\n      }\n\n      var days = [\"sun\", \"mon\", \"tue\", \"wed\", \"thu\", \"fri\", \"sat\"];\n\n      var key = \"cldr_day_\" + context + \"_\" + length + \"_\" + days[day];\n      return withFallback\n        ? this.__localizeWithFallback(\n            context,\n            context === \"format\" ? \"stand-alone\" : \"format\",\n            key,\n            locale\n          )\n        : this.__mgr.localize(key, [], locale);\n    },\n\n    /**\n     * Return localized names of month names\n     *\n     * @param length {String} format of the month names.\n     *       Possible values: \"abbreviated\", \"narrow\", \"wide\"\n     * @param locale {String} optional locale to be used\n     * @param context {String} (default: \"format\") intended context.\n     *       Possible values: \"format\", \"stand-alone\"\n     * @param withFallback {Boolean?} if true, the previous parameter's other value is tried\n     * in order to find a localized name for the month\n     * @return {String[]} array of localized month names starting with january.\n     */\n    getMonthNames(length, locale, context, withFallback) {\n      var context = context ? context : \"format\";\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertInArray(length, [\"abbreviated\", \"narrow\", \"wide\"]);\n        qx.core.Assert.assertInArray(context, [\"format\", \"stand-alone\"]);\n      }\n\n      var names = [];\n\n      for (var i = 0; i < 12; i++) {\n        var key = \"cldr_month_\" + context + \"_\" + length + \"_\" + (i + 1);\n        names.push(\n          withFallback\n            ? this.__localizeWithFallback(\n                context,\n                context === \"format\" ? \"stand-alone\" : \"format\",\n                key,\n                locale\n              )\n            : this.__mgr.localize(key, [], locale)\n        );\n      }\n\n      return names;\n    },\n\n    /**\n     * Return localized name of a month\n     *\n     * @param length {String} format of the month names.\n     *       Possible values: \"abbreviated\", \"narrow\", \"wide\"\n     * @param month {Integer} index of the month. 0=january, 1=february, ...\n     * @param locale {String} optional locale to be used\n     * @param context {String} (default: \"format\") intended context.\n     *       Possible values: \"format\", \"stand-alone\"\n     * @param withFallback {Boolean?} if true, the previous parameter's other value is tried\n     * in order to find a localized name for the month\n     * @return {String} localized month name\n     */\n    getMonthName(length, month, locale, context, withFallback) {\n      var context = context ? context : \"format\";\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertInArray(length, [\"abbreviated\", \"narrow\", \"wide\"]);\n        qx.core.Assert.assertInArray(context, [\"format\", \"stand-alone\"]);\n      }\n\n      var key = \"cldr_month_\" + context + \"_\" + length + \"_\" + (month + 1);\n      return withFallback\n        ? this.__localizeWithFallback(\n            context,\n            context === \"format\" ? \"stand-alone\" : \"format\",\n            key,\n            locale\n          )\n        : this.__mgr.localize(key, [], locale);\n    },\n\n    /**\n     * Return localized date format string to be used with {@link qx.util.format.DateFormat}.\n     *\n     * @param size {String} format of the date format.\n     *      Possible values: \"short\", \"medium\", \"long\", \"full\"\n     * @param locale {String?} optional locale to be used\n     * @return {String} localized date format string\n     */\n    getDateFormat(size, locale) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertInArray(size, [\"short\", \"medium\", \"long\", \"full\"]);\n      }\n\n      var key = \"cldr_date_format_\" + size;\n      return this.__mgr.localize(key, [], locale);\n    },\n\n    /**\n     * Try to localize a date/time format string. For format string possibilities see\n     * <a href=\"http://cldr.unicode.org/translation/date-time\">Date/Time Symbol reference</a>\n     * at CLDR - Unicode Common Locale Data Repository.\n     *\n     * If no localization is available take the fallback format string.\n     *\n     * @param canonical {String} format string containing only field information, and in a canonical order.\n     *       Examples are \"yyyyMMMM\" for year + full month, or \"MMMd\" for abbreviated month + day.\n     * @param fallback {String} fallback format string if no localized version is found\n     * @param locale {String} optional locale to be used\n     * @return {String} best matching format string\n     */\n    getDateTimeFormat(canonical, fallback, locale) {\n      var key = \"cldr_date_time_format_\" + canonical;\n      var localizedFormat = this.__mgr.localize(key, [], locale);\n\n      if (localizedFormat == key) {\n        localizedFormat = fallback;\n      }\n\n      return localizedFormat;\n    },\n\n    /**\n     * Return localized time format string to be used with {@link qx.util.format.DateFormat}.\n     *\n     * @param size {String} format of the time pattern.\n     *      Possible values: \"short\", \"medium\", \"long\", \"full\"\n     * @param locale {String} optional locale to be used\n     * @return {String} localized time format string\n     */\n    getTimeFormat(size, locale) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertInArray(size, [\"short\", \"medium\", \"long\", \"full\"]);\n      }\n\n      var key = \"cldr_time_format_\" + size;\n      var localizedFormat = this.__mgr.localize(key, [], locale);\n\n      if (localizedFormat != key) {\n        return localizedFormat;\n      }\n\n      switch (size) {\n        case \"short\":\n        case \"medium\":\n          return qx.locale.Date.getDateTimeFormat(\"HHmm\", \"HH:mm\");\n\n        case \"long\":\n          return qx.locale.Date.getDateTimeFormat(\"HHmmss\", \"HH:mm:ss\");\n\n        case \"full\":\n          return qx.locale.Date.getDateTimeFormat(\"HHmmsszz\", \"HH:mm:ss zz\");\n\n        default:\n          throw new Error(\"This case should never happen.\");\n      }\n    },\n\n    /**\n     * Return the day the week starts with\n     *\n     * Reference: Common Locale Data Repository (cldr) supplementalData.xml\n     *\n     * @param locale {String} optional locale to be used\n     * @return {Integer} index of the first day of the week. 0=sunday, 1=monday, ...\n     */\n    getWeekStart(locale) {\n      var weekStart = {\n        // default is monday\n        MV: 5, // friday\n        AE: 6, // saturday\n        AF: 6,\n        BH: 6,\n        DJ: 6,\n        DZ: 6,\n        EG: 6,\n        ER: 6,\n        ET: 6,\n        IQ: 6,\n        IR: 6,\n        JO: 6,\n        KE: 6,\n        KW: 6,\n        LB: 6,\n        LY: 6,\n        MA: 6,\n        OM: 6,\n        QA: 6,\n        SA: 6,\n        SD: 6,\n        SO: 6,\n        TN: 6,\n        YE: 6,\n        AS: 0, // sunday\n        AU: 0,\n        AZ: 0,\n        BW: 0,\n        CA: 0,\n        CN: 0,\n        FO: 0,\n        GE: 0,\n        GL: 0,\n        GU: 0,\n        HK: 0,\n        IE: 0,\n        IL: 0,\n        IS: 0,\n        JM: 0,\n        JP: 0,\n        KG: 0,\n        KR: 0,\n        LA: 0,\n        MH: 0,\n        MN: 0,\n        MO: 0,\n        MP: 0,\n        MT: 0,\n        NZ: 0,\n        PH: 0,\n        PK: 0,\n        SG: 0,\n        TH: 0,\n        TT: 0,\n        TW: 0,\n        UM: 0,\n        US: 0,\n        UZ: 0,\n        VI: 0,\n        ZA: 0,\n        ZW: 0,\n        MW: 0,\n        NG: 0,\n        TJ: 0\n      };\n\n      var territory = qx.locale.Date._getTerritory(locale);\n\n      // default is monday\n      return weekStart[territory] != null ? weekStart[territory] : 1;\n    },\n\n    /**\n     * Return the day the weekend starts with\n     *\n     * Reference: Common Locale Data Repository (cldr) supplementalData.xml\n     *\n     * @param locale {String} optional locale to be used\n     * @return {Integer} index of the first day of the weekend. 0=sunday, 1=monday, ...\n     */\n    getWeekendStart(locale) {\n      var weekendStart = {\n        // default is saturday\n        EG: 5, // friday\n        IL: 5,\n        SY: 5,\n        IN: 0, // sunday\n        AE: 4, // thursday\n        BH: 4,\n        DZ: 4,\n        IQ: 4,\n        JO: 4,\n        KW: 4,\n        LB: 4,\n        LY: 4,\n        MA: 4,\n        OM: 4,\n        QA: 4,\n        SA: 4,\n        SD: 4,\n        TN: 4,\n        YE: 4\n      };\n\n      var territory = qx.locale.Date._getTerritory(locale);\n\n      // default is saturday\n      return weekendStart[territory] != null ? weekendStart[territory] : 6;\n    },\n\n    /**\n     * Return the day the weekend ends with\n     *\n     * Reference: Common Locale Data Repository (cldr) supplementalData.xml\n     *\n     * @param locale {String} optional locale to be used\n     * @return {Integer} index of the last day of the weekend. 0=sunday, 1=monday, ...\n     */\n    getWeekendEnd(locale) {\n      var weekendEnd = {\n        // default is sunday\n        AE: 5, // friday\n        BH: 5,\n        DZ: 5,\n        IQ: 5,\n        JO: 5,\n        KW: 5,\n        LB: 5,\n        LY: 5,\n        MA: 5,\n        OM: 5,\n        QA: 5,\n        SA: 5,\n        SD: 5,\n        TN: 5,\n        YE: 5,\n        AF: 5,\n        IR: 5,\n        EG: 6, // saturday\n        IL: 6,\n        SY: 6\n      };\n\n      var territory = qx.locale.Date._getTerritory(locale);\n\n      // default is sunday\n      return weekendEnd[territory] != null ? weekendEnd[territory] : 0;\n    },\n\n    /**\n     * Returns whether a certain day of week belongs to the week end.\n     *\n     * @param day {Integer} index of the day. 0=sunday, 1=monday, ...\n     * @param locale {String} optional locale to be used\n     * @return {Boolean} whether the given day is a weekend day\n     */\n    isWeekend(day, locale) {\n      var weekendStart = qx.locale.Date.getWeekendStart(locale);\n      var weekendEnd = qx.locale.Date.getWeekendEnd(locale);\n\n      if (weekendEnd > weekendStart) {\n        return day >= weekendStart && day <= weekendEnd;\n      } else {\n        return day >= weekendStart || day <= weekendEnd;\n      }\n    },\n\n    /**\n     * Extract the territory part from a locale\n     *\n     * @param locale {String} the locale\n     * @return {String} territory\n     */\n    _getTerritory(locale) {\n      if (locale) {\n        var territory = locale.split(\"_\")[1] || locale;\n      } else {\n        territory = this.__mgr.getTerritory() || this.__mgr.getLanguage();\n      }\n\n      return territory.toUpperCase();\n    },\n\n    /**\n     * Provide localization (CLDR) data with fallback between \"format\" and \"stand-alone\" contexts.\n     * It is used in {@link #getDayName} and {@link #getMonthName} methods.\n     *\n     * @param context {String} intended context.\n     *       Possible values: \"format\", \"stand-alone\".\n     * @param fallbackContext {String} the context used in case no localization is found for the key.\n     * @param key {String} message id (may contain format strings)\n     * @param locale {String} the locale\n     * @return {String} localized name for the key\n     *\n     */\n    __localizeWithFallback(context, fallbackContext, key, locale) {\n      var localizedString = this.__mgr.localize(key, [], locale);\n      if (localizedString == key) {\n        var newKey = key.replace(\n          \"_\" + context + \"_\",\n          \"_\" + fallbackContext + \"_\"\n        );\n\n        return this.__mgr.localize(newKey, [], locale);\n      } else {\n        return localizedString;\n      }\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}