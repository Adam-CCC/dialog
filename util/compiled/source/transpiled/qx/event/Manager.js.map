{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "Object",
    "implement",
    "core",
    "IDisposable",
    "construct",
    "win",
    "registration",
    "__window",
    "__windowId",
    "ObjectRegistry",
    "toHashCode",
    "__registration",
    "self",
    "method",
    "bom",
    "Event",
    "removeNativeListener",
    "dispose",
    "Environment",
    "get",
    "addNativeListener",
    "event",
    "GlobalError",
    "observeMethod",
    "__listeners",
    "__handlers",
    "__dispatchers",
    "__handlerCache",
    "__clearBlackList",
    "util",
    "DeferredCall",
    "__blacklist",
    "$$blackListCleaner",
    "statics",
    "__lastUnique",
    "getNextUniqueId",
    "__globalEventMonitors",
    "addGlobalEventMonitor",
    "fn",
    "context",
    "Assert",
    "assertFunction",
    "$$context",
    "push",
    "removeGlobalEventMonitor",
    "lang",
    "Array",
    "remove",
    "resetGlobalEventMonitors",
    "Manager",
    "getGlobalEventMonitor",
    "setGlobalEventMonitor",
    "members",
    "__disposeWrapper",
    "getWindow",
    "getWindowId",
    "getHandler",
    "clazz",
    "handler",
    "classname",
    "getDispatcher",
    "dispatcher",
    "getListeners",
    "target",
    "type",
    "capture",
    "targetKey",
    "$$hash",
    "targetMap",
    "entryKey",
    "entryList",
    "concat",
    "getAllListeners",
    "serializeListeners",
    "result",
    "indexOf",
    "entry",
    "substring",
    "charAt",
    "i",
    "l",
    "length",
    "toggleAttachedEvents",
    "enable",
    "charCodeAt",
    "__registerAtHandler",
    "__unregisterAtHandler",
    "hasListener",
    "log",
    "Logger",
    "trace",
    "Error",
    "importListeners",
    "list",
    "listKey",
    "item",
    "listener",
    "unique",
    "addListener",
    "msg",
    "assertObject",
    "assertString",
    "assertFunctionOrAsyncFunction",
    "undefined",
    "assertBoolean",
    "findHandler",
    "isDomNode",
    "isWindow",
    "isObject",
    "isDocument",
    "key",
    "nodeType",
    "tagName",
    "toLowerCase",
    "cache",
    "classes",
    "getHandlers",
    "IEventHandler",
    "instance",
    "supportedTypes",
    "targetCheck",
    "SUPPORTED_TYPES",
    "TARGET_CHECK",
    "found",
    "TARGET_DOMNODE",
    "TARGET_WINDOW",
    "TARGET_OBJECT",
    "TARGET_DOCUMENT",
    "IGNORE_CAN_HANDLE",
    "canHandleEvent",
    "registerEvent",
    "warn",
    "removeListener",
    "removeAt",
    "__addToBlacklist",
    "removeListenerById",
    "id",
    "split",
    "removeAllListeners",
    "forEach",
    "deleteAllListeners",
    "unregisterEvent",
    "dispatchEvent",
    "assertNotUndefined",
    "assertNotNull",
    "assertInstance",
    "monitors",
    "preventDefault",
    "getDefaultPrevented",
    "call",
    "ex",
    "error",
    "toString",
    "slice",
    "getType",
    "getBubbles",
    "Pool",
    "getInstance",
    "poolObject",
    "getTarget",
    "setTarget",
    "getDispatchers",
    "dispatched",
    "tracker",
    "canDispatchEvent",
    "Utils",
    "track",
    "then",
    "removeManager",
    "DisposeUtil",
    "disposeMap",
    "uid",
    "schedule",
    "isBlacklisted"
  ],
  "sources": [
    "C:/Users/dadovaz/AppData/Roaming/npm/node_modules/@qooxdoo/framework/source/class/qx/event/Manager.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n     * Sebastian Werner (wpbasti)\n     * John Spackman (johnspackman)\n     * Christian Boulanger (cboulanger)\n\n************************************************************************ */\n\n/**\n * Wrapper for browser DOM event handling for each browser window/frame.\n *\n * @require(qx.bom.Event)\n */\nqx.Class.define(\"qx.event.Manager\", {\n  extend: Object,\n  implement: [qx.core.IDisposable],\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * Creates a new instance of the event handler.\n   *\n   * @param win {Window} The DOM window this manager handles the events for\n   * @param registration {qx.event.Registration} The event registration to use\n   */\n  construct(win, registration) {\n    // Assign window object\n    this.__window = win;\n    this.__windowId = qx.core.ObjectRegistry.toHashCode(win);\n    this.__registration = registration;\n\n    // Register to the page unload event.\n    // Only for iframes and other secondary documents.\n    if (win.qx !== qx) {\n      var self = this;\n      var method = function () {\n        qx.bom.Event.removeNativeListener(win, \"unload\", method);\n        self.dispose();\n      };\n      if (qx.core.Environment.get(\"qx.globalErrorHandling\")) {\n        qx.bom.Event.addNativeListener(\n          win,\n          \"unload\",\n          qx.event.GlobalError.observeMethod(method)\n        );\n      } else {\n        qx.bom.Event.addNativeListener(win, \"unload\", method);\n      }\n    }\n\n    // Registry for event listeners\n    this.__listeners = {};\n\n    // The handler and dispatcher instances\n    this.__handlers = {};\n    this.__dispatchers = {};\n\n    this.__handlerCache = {};\n\n    this.__clearBlackList = new qx.util.DeferredCall(function () {\n      this.__blacklist = null;\n    }, this);\n    this.__clearBlackList.$$blackListCleaner = true;\n  },\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics: {\n    /** @type {Integer} Last used ID for an event */\n    __lastUnique: 0,\n\n    /**\n     * Returns an unique ID which may be used in combination with a target and\n     * a type to identify an event entry.\n     *\n     * @return {String} The next free identifier (auto-incremented)\n     */\n    getNextUniqueId() {\n      return this.__lastUnique++ + \"\";\n    },\n\n    /**\n     * @type {Array} private list of global event monitor functions\n     */\n    __globalEventMonitors: [],\n\n    /**\n     * Adds a global event monitor function which is called for each event fired\n     * anywhere in the application. The function is called with the signature\n     * (target: {@link qx.core.Object}, event: {@link qx.event.type.Event}).\n     * Since for performance reasons, the original event object is passed,\n     * the monitor function must not change this event in any way.\n     *\n     * @param fn {Function} Monitor function\n     * @param context {Object?} Optional execution context of the function\n     */\n    addGlobalEventMonitor(fn, context) {\n      qx.core.Assert.assertFunction(fn);\n      fn.$$context = context;\n      this.__globalEventMonitors.push(fn);\n    },\n\n    /**\n     * Removes a global event monitor function that had\n     * previously been added.\n     * @param fn {Function} The global monitor function\n     */\n    removeGlobalEventMonitor(fn) {\n      qx.core.Assert.assertFunction(fn);\n      qx.lang.Array.remove(this.__globalEventMonitors, fn);\n    },\n\n    /**\n     * Remove all registered event monitors\n     */\n    resetGlobalEventMonitors() {\n      qx.event.Manager.__globalEventMonitors = [];\n    },\n\n    /**\n     * Returns the global event monitor. Not compatible with the {@link\n     * qx.event.Manager.addGlobalEventMonitor} API. Will be removed in v7.0.0\n     *\n     * @deprecated {6.0}\n     * @return {Function?} the global monitor function\n     */\n    getGlobalEventMonitor() {\n      return this.__globalEventMonitors[0];\n    },\n\n    /**\n     * Sets the global event monitor. Not compatible with the {@link\n     * qx.event.Manager.addGlobalEventMonitor} API. Will be removed in\n     * v7.0.0. Use {@link qx.event.Manager.addGlobalEventMonitor} instead.\n     *\n     * @deprecated {6.0}\n     * @param fn {Function?} the global monitor function\n     */\n    setGlobalEventMonitor(fn) {\n      qx.core.Assert.assertFunction(fn);\n      this.__globalEventMonitors[0] = fn;\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __registration: null,\n    __listeners: null,\n\n    __dispatchers: null,\n    __disposeWrapper: null,\n\n    __handlers: null,\n    __handlerCache: null,\n    __window: null,\n    __windowId: null,\n\n    __blacklist: null,\n    __clearBlackList: null,\n\n    /*\n    ---------------------------------------------------------------------------\n      HELPERS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Get the window instance the event manager is responsible for\n     *\n     * @return {Window} DOM window instance\n     */\n    getWindow() {\n      return this.__window;\n    },\n\n    /**\n     * Get the hashcode of the manager's window\n     *\n     * @return {String} The window's hashcode\n     */\n    getWindowId() {\n      return this.__windowId;\n    },\n\n    /**\n     * Returns an instance of the given handler class for this manager(window).\n     *\n     * @param clazz {Class} Any class which implements {@link qx.event.IEventHandler}\n     * @return {Object} The instance used by this manager\n     */\n    getHandler(clazz) {\n      var handler = this.__handlers[clazz.classname];\n\n      if (handler) {\n        return handler;\n      }\n\n      return (this.__handlers[clazz.classname] = new clazz(this));\n    },\n\n    /**\n     * Returns an instance of the given dispatcher class for this manager(window).\n     *\n     * @param clazz {Class} Any class which implements {@link qx.event.IEventHandler}\n     * @return {Object} The instance used by this manager\n     */\n    getDispatcher(clazz) {\n      var dispatcher = this.__dispatchers[clazz.classname];\n\n      if (dispatcher) {\n        return dispatcher;\n      }\n\n      return (this.__dispatchers[clazz.classname] = new clazz(\n        this,\n        this.__registration\n      ));\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT LISTENER MANAGEMENT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Get a copy of all event listeners for the given combination\n     * of target, event type and phase.\n     *\n     * This method is especially useful and for event handlers to\n     * to query the listeners registered in the manager.\n     *\n     * @param target {Object} Any valid event target\n     * @param type {String} Event type\n     * @param capture {Boolean ? false} Whether the listener is for the\n     *       capturing phase of the bubbling phase.\n     * @return {Array|null} Array of registered event handlers. May return\n     *       null when no listener were found.\n     */\n    getListeners(target, type, capture) {\n      var targetKey =\n        target.$$hash || qx.core.ObjectRegistry.toHashCode(target);\n      var targetMap = this.__listeners[targetKey];\n\n      if (!targetMap) {\n        return null;\n      }\n\n      var entryKey = type + (capture ? \"|capture\" : \"|bubble\");\n      var entryList = targetMap[entryKey];\n\n      return entryList ? entryList.concat() : null;\n    },\n\n    /**\n     * Returns all registered listeners.\n     *\n     * @internal\n     *\n     * @return {Map} All registered listeners. The key is the hash code form an object.\n     */\n    getAllListeners() {\n      return this.__listeners;\n    },\n\n    /**\n     * Returns a serialized array of all events attached on the given target.\n     *\n     * @param target {Object} Any valid event target\n     * @return {Map[]} Array of maps where everyone contains the keys:\n     *   <code>handler</code>, <code>self</code>, <code>type</code> and <code>capture</code>.\n     */\n    serializeListeners(target) {\n      var targetKey =\n        target.$$hash || qx.core.ObjectRegistry.toHashCode(target);\n      var targetMap = this.__listeners[targetKey];\n      var result = [];\n\n      if (targetMap) {\n        var indexOf, type, capture, entryList, entry;\n        for (var entryKey in targetMap) {\n          indexOf = entryKey.indexOf(\"|\");\n          type = entryKey.substring(0, indexOf);\n          capture = entryKey.charAt(indexOf + 1) == \"c\";\n          entryList = targetMap[entryKey];\n\n          for (var i = 0, l = entryList.length; i < l; i++) {\n            entry = entryList[i];\n            result.push({\n              self: entry.context,\n              handler: entry.handler,\n              type: type,\n              capture: capture\n            });\n          }\n        }\n      }\n\n      return result;\n    },\n\n    /**\n     * This method might be used to temporally remove all events\n     * directly attached to the given target. This do not work\n     * have any effect on bubbling events normally.\n     *\n     * This is mainly thought for detaching events in IE, before\n     * cloning them. It also removes all leak scenarios\n     * when unloading a document and may be used here as well.\n     *\n     * @internal\n     * @param target {Object} Any valid event target\n     * @param enable {Boolean} Whether to enable or disable the events\n     */\n    toggleAttachedEvents(target, enable) {\n      var targetKey =\n        target.$$hash || qx.core.ObjectRegistry.toHashCode(target);\n      var targetMap = this.__listeners[targetKey];\n\n      if (targetMap) {\n        var indexOf, type, capture, entryList;\n        for (var entryKey in targetMap) {\n          indexOf = entryKey.indexOf(\"|\");\n          type = entryKey.substring(0, indexOf);\n          capture = entryKey.charCodeAt(indexOf + 1) === 99; // checking for character \"c\".\n          entryList = targetMap[entryKey];\n\n          if (enable) {\n            this.__registerAtHandler(target, type, capture);\n          } else {\n            this.__unregisterAtHandler(target, type, capture);\n          }\n        }\n      }\n    },\n\n    /**\n     * Check whether there are one or more listeners for an event type\n     * registered at the target.\n     *\n     * @param target {Object} Any valid event target\n     * @param type {String} The event type\n     * @param capture {Boolean ? false} Whether to check for listeners of\n     *         the bubbling or of the capturing phase.\n     * @return {Boolean} Whether the target has event listeners of the given type.\n     */\n    hasListener(target, type, capture) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (target == null) {\n          qx.log.Logger.trace(this);\n          throw new Error(\"Invalid object: \" + target);\n        }\n      }\n\n      var targetKey =\n        target.$$hash || qx.core.ObjectRegistry.toHashCode(target);\n      var targetMap = this.__listeners[targetKey];\n\n      if (!targetMap) {\n        return false;\n      }\n\n      var entryKey = type + (capture ? \"|capture\" : \"|bubble\");\n      var entryList = targetMap[entryKey];\n\n      return !!(entryList && entryList.length > 0);\n    },\n\n    /**\n     * Imports a list of event listeners at once. This only\n     * works for newly created elements as it replaces\n     * all existing data structures.\n     *\n     * Works with a map of data. Each entry in this map should be a\n     * map again with the keys <code>type</code>, <code>listener</code>,\n     * <code>self</code>, <code>capture</code> and an optional <code>unique</code>.\n     *\n     * The values are identical to the parameters of {@link #addListener}.\n     * For details please have a look there.\n     *\n     * @param target {Object} Any valid event target\n     * @param list {Map} A map where every listener has an unique key.\n     */\n    importListeners(target, list) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (target == null) {\n          qx.log.Logger.trace(this);\n          throw new Error(\"Invalid object: \" + target);\n        }\n      }\n\n      var targetKey =\n        target.$$hash || qx.core.ObjectRegistry.toHashCode(target);\n      var targetMap = (this.__listeners[targetKey] = {});\n      var clazz = qx.event.Manager;\n\n      for (var listKey in list) {\n        var item = list[listKey];\n\n        var entryKey = item.type + (item.capture ? \"|capture\" : \"|bubble\");\n        var entryList = targetMap[entryKey];\n\n        if (!entryList) {\n          entryList = targetMap[entryKey] = [];\n\n          // This is the first event listener for this type and target\n          // Inform the event handler about the new event\n          // they perform the event registration at DOM level if needed\n          this.__registerAtHandler(target, item.type, item.capture);\n        }\n\n        // Append listener to list\n        entryList.push({\n          handler: item.listener,\n          context: item.self,\n          unique: item.unique || clazz.__lastUnique++ + \"\"\n        });\n      }\n    },\n\n    /**\n     * Add an event listener to any valid target. The event listener is passed an\n     * instance of {@link qx.event.type.Event} containing all relevant information\n     * about the event as parameter.\n     *\n     * @param target {Object} Any valid event target\n     * @param type {String} Name of the event e.g. \"click\", \"keydown\", ...\n     * @param listener {Function} Event listener function\n     * @param self {Object ? null} Reference to the 'this' variable inside\n     *         the event listener. When not given, the corresponding dispatcher\n     *         usually falls back to a default, which is the target\n     *         by convention. Note this is not a strict requirement, i.e.\n     *         custom dispatchers can follow a different strategy.\n     * @param capture {Boolean ? false} Whether to attach the event to the\n     *         capturing phase or the bubbling phase of the event. The default is\n     *         to attach the event handler to the bubbling phase.\n     * @return {String} An opaque ID, which can be used to remove the event listener\n     *         using the {@link #removeListenerById} method.\n     * @throws {Error} if the parameters are wrong\n     */\n    addListener(target, type, listener, self, capture) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        var msg =\n          \"Failed to add event listener for type '\" +\n          type +\n          \"'\" +\n          \" to the target '\" +\n          target.classname +\n          \"': \";\n\n        qx.core.Assert.assertObject(target, msg + \"Invalid Target.\");\n        qx.core.Assert.assertString(type, msg + \"Invalid event type.\");\n        qx.core.Assert.assertFunctionOrAsyncFunction(\n          listener,\n          msg + \"Invalid callback function\"\n        );\n\n        if (capture !== undefined) {\n          qx.core.Assert.assertBoolean(capture, \"Invalid capture flag.\");\n        }\n      }\n\n      var targetKey =\n        target.$$hash || qx.core.ObjectRegistry.toHashCode(target);\n      var targetMap = this.__listeners[targetKey];\n\n      if (!targetMap) {\n        targetMap = this.__listeners[targetKey] = {};\n      }\n\n      var entryKey = type + (capture ? \"|capture\" : \"|bubble\");\n      var entryList = targetMap[entryKey];\n\n      if (!entryList) {\n        entryList = targetMap[entryKey] = [];\n      }\n\n      // This is the first event listener for this type and target\n      // Inform the event handler about the new event\n      // they perform the event registration at DOM level if needed\n      if (entryList.length === 0) {\n        this.__registerAtHandler(target, type, capture);\n      }\n\n      // Append listener to list\n      var unique = qx.event.Manager.__lastUnique++ + \"\";\n      var entry = {\n        handler: listener,\n        context: self,\n        unique: unique\n      };\n\n      entryList.push(entry);\n\n      return entryKey + \"|\" + unique;\n    },\n\n    /**\n     * Get the event handler class matching the given event target and type\n     *\n     * @param target {var} The event target\n     * @param type {String} The event type\n     * @return {qx.event.IEventHandler|null} The best matching event handler or\n     *     <code>null</code>.\n     */\n    findHandler(target, type) {\n      var isDomNode = false,\n        isWindow = false,\n        isObject = false,\n        isDocument = false;\n      var key;\n\n      if (target.nodeType === 1) {\n        isDomNode = true;\n        key = \"DOM_\" + target.tagName.toLowerCase() + \"_\" + type;\n      } else if (target.nodeType === 9) {\n        isDocument = true;\n        key = \"DOCUMENT_\" + type;\n      }\n\n      // Please note:\n      // Identical operator does not work in IE (as of version 7) because\n      // document.parentWindow is not identical to window. Crazy stuff.\n      else if (target == this.__window) {\n        isWindow = true;\n        key = \"WIN_\" + type;\n      } else if (target.classname) {\n        isObject = true;\n        key = \"QX_\" + target.classname + \"_\" + type;\n      } else {\n        key = \"UNKNOWN_\" + target + \"_\" + type;\n      }\n\n      var cache = this.__handlerCache;\n      if (cache[key]) {\n        return cache[key];\n      }\n\n      var classes = this.__registration.getHandlers();\n      var IEventHandler = qx.event.IEventHandler;\n      var clazz, instance, supportedTypes, targetCheck;\n\n      for (var i = 0, l = classes.length; i < l; i++) {\n        clazz = classes[i];\n\n        // shortcut type check\n        supportedTypes = clazz.SUPPORTED_TYPES;\n        if (supportedTypes && !supportedTypes[type]) {\n          continue;\n        }\n\n        // shortcut target check\n        targetCheck = clazz.TARGET_CHECK;\n        if (targetCheck) {\n          // use bitwise & to compare for the bitmask!\n          var found = false;\n          if (isDomNode && (targetCheck & IEventHandler.TARGET_DOMNODE) != 0) {\n            found = true;\n          } else if (\n            isWindow &&\n            (targetCheck & IEventHandler.TARGET_WINDOW) != 0\n          ) {\n            found = true;\n          } else if (\n            isObject &&\n            (targetCheck & IEventHandler.TARGET_OBJECT) != 0\n          ) {\n            found = true;\n          } else if (\n            isDocument &&\n            (targetCheck & IEventHandler.TARGET_DOCUMENT) != 0\n          ) {\n            found = true;\n          }\n\n          if (!found) {\n            continue;\n          }\n        }\n\n        instance = this.getHandler(classes[i]);\n        if (clazz.IGNORE_CAN_HANDLE || instance.canHandleEvent(target, type)) {\n          cache[key] = instance;\n          return instance;\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * This method is called each time an event listener for one of the\n     * supported events is added using {qx.event.Manager#addListener}.\n     *\n     * @param target {Object} Any valid event target\n     * @param type {String} event type\n     * @param capture {Boolean} Whether to attach the event to the\n     *         capturing phase or the bubbling phase of the event.\n     * @throws {Error} if there is no handler for the event\n     */\n    __registerAtHandler(target, type, capture) {\n      var handler = this.findHandler(target, type);\n\n      if (handler) {\n        handler.registerEvent(target, type, capture);\n        return;\n      }\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.log.Logger.warn(\n          this,\n          \"There is no event handler for the event '\" +\n            type +\n            \"' on target '\" +\n            target +\n            \"'!\"\n        );\n      }\n    },\n\n    /**\n     * Remove an event listener from an event target.\n     *\n     * @param target {Object} Any valid event target\n     * @param type {String} Name of the event\n     * @param listener {Function} The pointer to the event listener\n     * @param self {Object ? null} Reference to the 'this' variable inside\n     *         the event listener.\n     * @param capture {Boolean ? false} Whether to remove the event listener of\n     *         the bubbling or of the capturing phase.\n     * @return {Boolean} Whether the event was removed successfully (was existant)\n     * @throws {Error} if the parameters are wrong\n     */\n    removeListener(target, type, listener, self, capture) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        var msg =\n          \"Failed to remove event listener for type '\" +\n          type +\n          \"'\" +\n          \" from the target '\" +\n          target.classname +\n          \"': \";\n\n        qx.core.Assert.assertObject(target, msg + \"Invalid Target.\");\n        qx.core.Assert.assertString(type, msg + \"Invalid event type.\");\n        qx.core.Assert.assertFunction(\n          listener,\n          msg + \"Invalid callback function\"\n        );\n\n        if (self !== undefined) {\n          qx.core.Assert.assertObject(self, \"Invalid context for callback.\");\n        }\n\n        if (capture !== undefined) {\n          qx.core.Assert.assertBoolean(capture, \"Invalid capture flag.\");\n        }\n      }\n\n      var targetKey =\n        target.$$hash || qx.core.ObjectRegistry.toHashCode(target);\n      var targetMap = this.__listeners[targetKey];\n\n      if (!targetMap) {\n        return false;\n      }\n\n      var entryKey = type + (capture ? \"|capture\" : \"|bubble\");\n      var entryList = targetMap[entryKey];\n\n      if (!entryList) {\n        return false;\n      }\n\n      var entry;\n      for (var i = 0, l = entryList.length; i < l; i++) {\n        entry = entryList[i];\n\n        if (entry.handler === listener && entry.context === self) {\n          qx.lang.Array.removeAt(entryList, i);\n          this.__addToBlacklist(entry.unique);\n\n          if (entryList.length == 0) {\n            this.__unregisterAtHandler(target, type, capture);\n          }\n\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Removes an event listener from an event target by an ID returned by\n     * {@link #addListener}.\n     *\n     * @param target {Object} The event target\n     * @param id {String} The ID returned by {@link #addListener}\n     * @return {Boolean} <code>true</code> if the handler was removed\n     */\n    removeListenerById(target, id) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        var msg =\n          \"Failed to remove event listener for id '\" +\n          id +\n          \"'\" +\n          \" from the target '\" +\n          target.classname +\n          \"': \";\n\n        qx.core.Assert.assertObject(target, msg + \"Invalid Target.\");\n        qx.core.Assert.assertString(id, msg + \"Invalid id type.\");\n      }\n\n      var split = id.split(\"|\");\n      var type = split[0];\n      var capture = split[1].charCodeAt(0) == 99; // detect leading \"c\"\n      var unique = split[2];\n\n      var targetKey =\n        target.$$hash || qx.core.ObjectRegistry.toHashCode(target);\n      var targetMap = this.__listeners[targetKey];\n\n      if (!targetMap) {\n        return false;\n      }\n\n      var entryKey = type + (capture ? \"|capture\" : \"|bubble\");\n      var entryList = targetMap[entryKey];\n\n      if (!entryList) {\n        return false;\n      }\n\n      var entry;\n      for (var i = 0, l = entryList.length; i < l; i++) {\n        entry = entryList[i];\n\n        if (entry.unique === unique) {\n          qx.lang.Array.removeAt(entryList, i);\n          this.__addToBlacklist(entry.unique);\n\n          if (entryList.length == 0) {\n            this.__unregisterAtHandler(target, type, capture);\n          }\n\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Remove all event listeners, which are attached to the given event target.\n     *\n     * @param target {Object} The event target to remove all event listeners from.\n     * @return {Boolean} Whether the events were existant and were removed successfully.\n     */\n    removeAllListeners(target) {\n      var targetKey =\n        target.$$hash || qx.core.ObjectRegistry.toHashCode(target);\n      var targetMap = this.__listeners[targetKey];\n      if (!targetMap) {\n        return false;\n      }\n\n      // Deregister from event handlers\n      var split, type, capture;\n      for (var entryKey in targetMap) {\n        if (targetMap[entryKey].length > 0) {\n          // This is quite expensive, see bug #1283\n          split = entryKey.split(\"|\");\n\n          targetMap[entryKey].forEach(function (entry) {\n            this.__addToBlacklist(entry.unique);\n          }, this);\n\n          type = split[0];\n          capture = split[1] === \"capture\";\n\n          this.__unregisterAtHandler(target, type, capture);\n        }\n      }\n\n      delete this.__listeners[targetKey];\n      return true;\n    },\n\n    /**\n     * Internal helper for deleting the internal listener  data structure for\n     * the given targetKey.\n     *\n     * @param targetKey {String} Hash code for the object to delete its\n     *   listeners.\n     *\n     * @internal\n     */\n    deleteAllListeners(targetKey) {\n      delete this.__listeners[targetKey];\n    },\n\n    /**\n     * This method is called each time the an event listener for one of the\n     * supported events is removed by using {qx.event.Manager#removeListener}\n     * and no other event listener is listening on this type.\n     *\n     * @param target {Object} Any valid event target\n     * @param type {String} event type\n     * @param capture {Boolean} Whether to attach the event to the\n     *         capturing phase or the bubbling phase of the event.\n     * @throws {Error} if there is no handler for the event\n     */\n    __unregisterAtHandler(target, type, capture) {\n      var handler = this.findHandler(target, type);\n\n      if (handler) {\n        handler.unregisterEvent(target, type, capture);\n        return;\n      }\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.log.Logger.warn(\n          this,\n          \"There is no event handler for the event '\" +\n            type +\n            \"' on target '\" +\n            target +\n            \"'!\"\n        );\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT DISPATCH\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Dispatches an event object using the qooxdoo event handler system. The\n     * event will only be visible in event listeners attached using\n     * {@link #addListener}. After dispatching the event object will be pooled\n     * for later reuse or disposed.\n     *\n     * @param target {Object} Any valid event target\n     * @param event {qx.event.type.Event} The event object to dispatch. The event\n     *     object must be obtained using {@link qx.event.Registration#createEvent}\n     *     and initialized using {@link qx.event.type.Event#init}.\n     * @return {Boolean|qx.Promise} whether the event default was prevented or not.\n     *     Returns true, when the event was NOT prevented.\n     * @throws {Error} if there is no dispatcher for the event\n     */\n    dispatchEvent(target, event) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        var msg =\n          \"Could not dispatch event '\" +\n          event +\n          \"' on target '\" +\n          target.classname +\n          \"': \";\n\n        qx.core.Assert.assertNotUndefined(\n          target,\n          msg + \"Invalid event target.\"\n        );\n\n        qx.core.Assert.assertNotNull(target, msg + \"Invalid event target.\");\n        qx.core.Assert.assertInstance(\n          event,\n          qx.event.type.Event,\n          msg + \"Invalid event object.\"\n        );\n      }\n\n      // Show the decentrally fired events to one or more global monitor functions\n      var monitors = qx.event.Manager.__globalEventMonitors;\n      if (monitors.length) {\n        for (var i = 0; i < monitors.length; i++) {\n          var preventDefault = event.getDefaultPrevented();\n          try {\n            monitors[i].call(monitors[i].$$context, target, event);\n          } catch (ex) {\n            qx.log.Logger.error(\n              \"Error in global event monitor function \" +\n                monitors[i].toString().slice(0, 50) +\n                \"...\"\n            );\n\n            // since 6.0.0-beta-2020051X: throw a real error to stop execution instead of just a warning\n            throw ex;\n          }\n          if (preventDefault != event.getDefaultPrevented()) {\n            // since 6.0.0-beta-2020051X: throw a real error to stop execution instead of just a warning\n            throw new Error(\n              \"Unexpected change by global event monitor function, modifications to event \" +\n                event.getType() +\n                \" is not allowed.\"\n            );\n          }\n        }\n      }\n\n      // Preparations\n      var type = event.getType();\n\n      if (!event.getBubbles() && !this.hasListener(target, type)) {\n        qx.event.Pool.getInstance().poolObject(event);\n        return true;\n      }\n\n      if (!event.getTarget()) {\n        event.setTarget(target);\n      }\n\n      // Interacion data\n      var classes = this.__registration.getDispatchers();\n      var instance;\n\n      // Loop through the dispatchers\n      var dispatched = false;\n      var tracker = {};\n\n      for (var i = 0, l = classes.length; i < l; i++) {\n        instance = this.getDispatcher(classes[i]);\n\n        // Ask if the dispatcher can handle this event\n        if (instance.canDispatchEvent(target, event, type)) {\n          qx.event.Utils.track(\n            tracker,\n            instance.dispatchEvent(target, event, type)\n          );\n\n          dispatched = true;\n          break;\n        }\n      }\n\n      if (!dispatched) {\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          qx.log.Logger.error(\n            this,\n            \"No dispatcher can handle event of type \" + type + \" on \" + target\n          );\n        }\n        return true;\n      }\n\n      return qx.event.Utils.then(tracker, function () {\n        // check whether \"preventDefault\" has been called\n        var preventDefault = event.getDefaultPrevented();\n\n        // Release the event instance to the event pool\n        qx.event.Pool.getInstance().poolObject(event);\n\n        return !preventDefault;\n      });\n    },\n\n    /**\n     * Dispose the event manager\n     */\n    dispose() {\n      // Remove from manager list\n      this.__registration.removeManager(this);\n\n      qx.util.DisposeUtil.disposeMap(this, \"__handlers\");\n      qx.util.DisposeUtil.disposeMap(this, \"__dispatchers\");\n\n      // Dispose data fields\n      this.__listeners = this.__window = this.__disposeWrapper = null;\n      this.__registration = this.__handlerCache = null;\n    },\n\n    /**\n     * Add event to blacklist.\n     *\n     * @param uid {number} unique event id\n     */\n    __addToBlacklist(uid) {\n      if (this.__blacklist === null) {\n        this.__blacklist = {};\n        this.__clearBlackList.schedule();\n      }\n      this.__blacklist[uid] = true;\n    },\n\n    /**\n     * Check if the event with the given id has been removed and is therefore blacklisted for event handling\n     *\n     * @param uid {number} unique event id\n     * @return {boolean}\n     */\n    isBlacklisted(uid) {\n      return this.__blacklist !== null && this.__blacklist[uid] === true;\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}