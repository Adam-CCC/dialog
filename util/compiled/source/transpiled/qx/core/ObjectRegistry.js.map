{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "inShutDown",
    "__registry",
    "__nextHash",
    "__postId",
    "__stackTraces",
    "register",
    "obj",
    "registry",
    "hash",
    "core",
    "ObjectRegistry",
    "toHashCode",
    "dispose",
    "Error",
    "unregister",
    "$$hash",
    "clearHashCode",
    "createHashCode",
    "String",
    "$$discardedHashCode",
    "ex",
    "removeAttribute",
    "fromHashCode",
    "suppressWarnings",
    "log",
    "Logger",
    "warn",
    "hasHashCode",
    "shutdown",
    "hashes",
    "push",
    "sort",
    "a",
    "b",
    "parseInt",
    "i",
    "l",
    "length",
    "error",
    "toString",
    "debug",
    "getRegistry",
    "getNextHash",
    "getPostId",
    "getStackTraces",
    "defer",
    "window",
    "top",
    "frames"
  ],
  "sources": [
    "C:/Users/dadovaz/AppData/Roaming/npm/node_modules/@qooxdoo/framework/source/class/qx/core/ObjectRegistry.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n\n************************************************************************ */\n\n/**\n * Registration for all instances of qooxdoo classes. Mainly\n * used to manage them for the final shutdown sequence and to\n * use weak references when connecting widgets to DOM nodes etc.\n *\n * @ignore(qx.dev, qx.dev.Debug.*)\n */\nqx.Bootstrap.define(\"qx.core.ObjectRegistry\", {\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics: {\n    /**\n     * @type {Boolean} Whether the application is in the shutdown phase\n     * @deprecated {6.0} shutdown is not a valid mechanism to terminate apps\n     * */\n    inShutDown: false,\n\n    /** @type {Map} Internal data structure to store objects */\n    __registry: {},\n\n    /** @type {Integer} Next new hash code. */\n    __nextHash: 0,\n\n    /** @type {String} Post id for hash code creation. */\n    __postId: \"\",\n\n    /** @type {Map} Object hashes to stack traces (for dispose profiling only) */\n    __stackTraces: {},\n\n    /**\n     * Registers an object into the database. This adds a hashcode\n     * to the object (if not already done before) and stores it under\n     * this hashcode. You can access this object later using the hashcode\n     * by calling {@link #fromHashCode}.\n     *\n     * All registered objects are automatically disposed on application\n     * shutdown. Each registered object must at least have a method\n     * called <code>dispose</code>.\n     *\n     * @param obj {Object} Any object with a dispose() method\n     */\n    register(obj) {\n      var registry = this.__registry;\n      if (!registry) {\n        return;\n      }\n\n      var hash = qx.core.ObjectRegistry.toHashCode(obj);\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (!obj.dispose) {\n          throw new Error(\"Invalid object: \" + obj);\n        }\n      }\n\n      registry[hash] = obj;\n    },\n\n    /**\n     * Removes the given object from the database.\n     *\n     * @param obj {Object} Any previously registered object\n     */\n    unregister(obj) {\n      var hash = obj.$$hash;\n      if (hash == null) {\n        return;\n      }\n\n      var registry = this.__registry;\n      if (registry && registry[hash]) {\n        delete registry[hash];\n      }\n\n      this.clearHashCode(obj);\n    },\n\n    /**\n     * Returns an unique identifier for the given object. If such an identifier\n     * does not yet exist, create it.\n     *\n     * @param obj {Object} the object to get the hashcode for\n     * @return {String} unique identifier for the given object\n     */\n    toHashCode(obj) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (obj == null) {\n          throw new Error(\"Invalid object: \" + obj);\n        }\n      }\n\n      var hash = obj.$$hash;\n      if (hash != null) {\n        return hash;\n      }\n\n      // Create new hash code\n      hash = this.createHashCode();\n\n      // Store\n      obj.$$hash = hash;\n\n      if (qx.core.Environment.get(\"qx.debug.dispose\")) {\n        if (qx.dev && qx.dev.Debug && qx.dev.Debug.disposeProfilingActive) {\n          this.__stackTraces[hash] = qx.dev.StackTrace.getStackTrace();\n        }\n      }\n\n      return obj.$$hash;\n    },\n\n    /**\n     * Creates a hash code\n     *\n     * @return {String}\n     */\n    createHashCode() {\n      var hash = String(this.__nextHash++ + this.__postId);\n      return hash;\n    },\n\n    /**\n     * Clears the unique identifier on the given object.\n     *\n     * @param obj {Object} the object to clear the hashcode for\n     */\n    clearHashCode(obj) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (obj == null) {\n          throw new Error(\"Invalid object: \" + obj);\n        }\n      }\n\n      var hash = obj.$$hash;\n      if (hash != null) {\n        // Delete the hash code\n        try {\n          obj.$$discardedHashCode = hash;\n          delete obj.$$hash;\n        } catch (ex) {\n          // IE has trouble directly removing the hash\n          // but it's ok with using removeAttribute\n          if (obj.removeAttribute) {\n            obj.removeAttribute(\"$$hash\");\n          }\n        }\n      }\n    },\n\n    /**\n     * Get an object instance by its hash code as returned by {@link #toHashCode}.\n     * If the object is already disposed or the hashCode is invalid,\n     * <code>null</code> is returned.\n     *\n     * @param hash {String} The object's hash code.\n     * @param suppressWarnings {Boolean?} if true warnings are suppressed; default is false\n     * @return {qx.core.Object} The corresponding object or <code>null</code>.\n     */\n    fromHashCode(hash, suppressWarnings) {\n      var obj = this.__registry[hash] || null;\n      if (!obj && !suppressWarnings) {\n        qx.log.Logger.warn(\n          this,\n          \"Object with hash code \" +\n            hash +\n            \" does not exist (since Qooxdoo 6.0 fromHashCode requires that you explicitly register objects with qx.core.ObjectRegistry.register)\"\n        );\n      }\n      return obj;\n    },\n\n    /**\n     * Detects whether an object instance is indexed by its hash code as returned by {@link #toHashCode}.\n     * Unlike {@link #fromHashCode} this does not output warnings if the object does not exist\n     *\n     * @param hash {String} The object's hash code.\n     * @return {qx.core.Object} The corresponding object or <code>null</code>.\n     */\n    hasHashCode(hash) {\n      return !!this.__registry[hash];\n    },\n\n    /**\n     * Disposing all registered object and cleaning up registry. This is\n     * automatically executed at application shutdown.\n     *\n     * @deprecated {6.0} shutdown is not a valid means to clean up because destruction order\n     * is not defined and dispose()/destructors are deprecated in favour of automatic\n     * garbage collection\n     */\n    shutdown() {\n      this.inShutDown = true;\n\n      var registry = this.__registry;\n      var hashes = [];\n\n      for (var hash in registry) {\n        hashes.push(hash);\n      }\n\n      // sort the objects! Remove the objecs created at startup\n      // as late as possible\n      hashes.sort(function (a, b) {\n        return parseInt(b, 10) - parseInt(a, 10);\n      });\n\n      var obj,\n        i = 0,\n        l = hashes.length;\n      while (true) {\n        try {\n          for (; i < l; i++) {\n            hash = hashes[i];\n            obj = registry[hash];\n\n            if (obj && obj.dispose) {\n              obj.dispose();\n            }\n          }\n        } catch (ex) {\n          qx.Bootstrap.error(\n            this,\n            \"Could not dispose object \" + obj.toString() + \": \" + ex,\n            ex\n          );\n\n          if (i !== l) {\n            i++;\n            continue;\n          }\n        }\n\n        break;\n      }\n\n      qx.Bootstrap.debug(this, \"Disposed \" + l + \" objects\");\n\n      delete this.__registry;\n    },\n\n    /**\n     * Returns the object registry.\n     *\n     * @return {Object} The registry\n     */\n    getRegistry() {\n      return this.__registry;\n    },\n\n    /**\n     * Returns the next hash code that will be used.\n     *\n     * @return {Integer} The next hash code\n     * @internal\n     */\n    getNextHash() {\n      return this.__nextHash;\n    },\n\n    /**\n     * Returns the postfix that identifies the current iframe\n     *\n     * @return {Integer} The next hash code\n     * @internal\n     */\n    getPostId() {\n      return this.__postId;\n    },\n\n    /**\n     * Returns the map of stack traces recorded when objects are registered\n     * (for dispose profiling)\n     * @return {Map} Map: object hash codes to stack traces\n     * @internal\n     */\n    getStackTraces() {\n      return this.__stackTraces;\n    }\n  },\n\n  defer(statics) {\n    if (window && window.top) {\n      var frames = window.top.frames;\n      for (var i = 0; i < frames.length; i++) {\n        if (frames[i] === window) {\n          statics.__postId = \"-\" + (i + 1);\n          return;\n        }\n      }\n    }\n    statics.__postId = \"-0\";\n  }\n});\n"
  ],
  "mappings": "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"
}